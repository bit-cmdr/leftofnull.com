<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-10T20:01:30-07:00</updated><id>http://localhost:4000/</id><title type="html">Left of Null</title><subtitle>Covering Coding, Technology, and Life.</subtitle><entry><title type="html">ES6 Command-Line Parsing</title><link href="http://localhost:4000/2017/12/10/es6-command-line-parsing.html" rel="alternate" type="text/html" title="ES6 Command-Line Parsing" /><published>2017-12-10T11:00:00-07:00</published><updated>2017-12-10T11:00:00-07:00</updated><id>http://localhost:4000/2017/12/10/es6-command-line-parsing</id><content type="html" xml:base="http://localhost:4000/2017/12/10/es6-command-line-parsing.html">&lt;h1 id=&quot;es6-command-line-parsing&quot;&gt;ES6 Command-Line Parsing&lt;/h1&gt;

&lt;p&gt;ECMA Script has come a really long way and continues to add more great features. A lot of them borrowed from functional languages and libraries. Typically there isn’t a lot of need for command-line argument parsing in this manner, there’s a lot of great tools and libraries that already exist for handling more complex situations. There are times when you just want to write a quick little CLI tool to do one-off work. Without futher ado, here’s how to do it.&lt;/p&gt;

&lt;h3 id=&quot;desired-input&quot;&gt;Desired input&lt;/h3&gt;

&lt;p&gt;Let’s take a look at what we want the startup to look like. Typically you can run something like&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node app 2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is that when you use the default node tools, &lt;code class=&quot;highlighter-rouge&quot;&gt;process.argv&lt;/code&gt;, to get the agruments passed in, you read everything, including &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; in the above example. The startup parameters aren’t very clear either. What are 2 and 3? If you wrote the code, I would hope you would know, but maybe you inherited this or you wrote this tool for other devs on your team. What about them?&lt;/p&gt;

&lt;h4 id=&quot;doesnt-this-look-nicer&quot;&gt;Doesn’t this look nicer?&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node app &lt;span class=&quot;nt&quot;&gt;--base&lt;/span&gt; 2 &lt;span class=&quot;nt&quot;&gt;--exponent&lt;/span&gt; 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just by looking at the parameters, you have a good idea of what might happen. Also, what we’re going to implement, the order of the parameters doesn’t matter, other than they will be expected to be paired in such a way that it always follows the convention of &lt;em&gt;name&lt;/em&gt; followed by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;without-parsing&quot;&gt;Without parsing&lt;/h3&gt;

&lt;p&gt;Command:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node app 2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Code in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; raised to the power of &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parsing-function&quot;&gt;Parsing function&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unknown argument passed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s break this down.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We’re using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread operator&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; to expand &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; and iterate. Essentially we’re ensuring &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; is an array. So we can perform the next set of operations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.slice(2)&lt;/code&gt; is being used to drop the first 2 arguments, which would be &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.reduce(...)&lt;/code&gt;. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;Reduce&lt;/a&gt; takes a function that takes two arguments and returns a single output. Many times you will see it depicted as taking a &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; argument, but it’s really &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;. You merge the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt;. I say merge, because you’re reducing. The operation that reduces the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt; is entirely up to you, add, subtract, multiply, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.push&lt;/code&gt; are all examples.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The function we are using to reduce will start off by taking the first two elements of the array, &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; will get index 0 and &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; will get index 1 on the very first run. Here &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; is a value and not an array, so we turn &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; into a multi-dimensional array of &lt;code class=&quot;highlighter-rouge&quot;&gt;[[l, r]]&lt;/code&gt;, in our example &lt;code class=&quot;highlighter-rouge&quot;&gt;[['--base', '2']]&lt;/code&gt;. The second iteration &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; will be the multi-dimensional array and &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; will be the next flag, in our example &lt;code class=&quot;highlighter-rouge&quot;&gt;'--base'&lt;/code&gt;. So far the accumulator will look like &lt;code class=&quot;highlighter-rouge&quot;&gt;[['--base', '2'], ['--exponent']]&lt;/code&gt;. For the last pass through we call &lt;code class=&quot;highlighter-rouge&quot;&gt;.push()&lt;/code&gt; on the last array in our multi-dimensional array. This gives us a result of &lt;code class=&quot;highlighter-rouge&quot;&gt;[['--base', '2'], ['--exponent', '3']]&lt;/code&gt;. If you have more, the process repeats until the end of the array. You can see here that it’s vital, and expected that you pass in paired parameters. Having a straggler without a name won’t work with this code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next we’re calling &lt;code class=&quot;highlighter-rouge&quot;&gt;.map()&lt;/code&gt; on the resulting multi-dimensional array. The map function performs an operation on each element of the array and returns the result. The end result is an equally sized array with the mapped values. For ours we are simply converting each array pair into an object. You’ll see the &lt;code class=&quot;highlighter-rouge&quot;&gt;substring()&lt;/code&gt; that’s removing the expected leading &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; on each name. The array &lt;code class=&quot;highlighter-rouge&quot;&gt;['--base', '2']&lt;/code&gt; becomes the object &lt;code class=&quot;highlighter-rouge&quot;&gt;{ base: '2' }&lt;/code&gt;. Leaving you with an array of objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last piece of the puzzle is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt; that everything is wrapped in. Notice that we’re using the spread operator at the beginning. This allows us to spread the object assign over each element in the array. Leading to one object &lt;code class=&quot;highlighter-rouge&quot;&gt;{ base: '2', exponent: '3' }&lt;/code&gt;, which we return as the result of the function, or an empty object if there was an error.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;all-together&quot;&gt;All together&lt;/h4&gt;

&lt;p&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; should look like this&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unknown argument passed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; raised to the power of &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exponent&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And call it&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node app &lt;span class=&quot;nt&quot;&gt;--base&lt;/span&gt; 2 &lt;span class=&quot;nt&quot;&gt;--exponent&lt;/span&gt; 3
2 raised to the power of 3 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node app &lt;span class=&quot;nt&quot;&gt;--exponent&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;--base&lt;/span&gt; 2
2 raised to the power of 3 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;opts&lt;/code&gt; will now have the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;{ base: '2', exponent: '3' }&lt;/code&gt; no matter which way you ran the command line. It’s also a lot easier to read in the code instead of trying to figure out which variable is in what index.&lt;/p&gt;

&lt;p&gt;I also have a &lt;a href=&quot;https://gist.github.com/bit-cmdr/48b7d82ad93fe9e3043d61e842c0ebe3&quot;&gt;Gist&lt;/a&gt; available for easy commenting and copying.&lt;/p&gt;</content><author><name></name></author><category term="node.js" /><category term="cli" /><summary type="html">ES6 Command-Line Parsing ECMA Script has come a really long way and continues to add more great features. A lot of them borrowed from functional languages and libraries. Typically there isn’t a lot of need for command-line argument parsing in this manner, there’s a lot of great tools and libraries that already exist for handling more complex situations. There are times when you just want to write a quick little CLI tool to do one-off work. Without futher ado, here’s how to do it. Desired input Let’s take a look at what we want the startup to look like. Typically you can run something like node app 2 3 The problem is that when you use the default node tools, process.argv, to get the agruments passed in, you read everything, including node and app in the above example. The startup parameters aren’t very clear either. What are 2 and 3? If you wrote the code, I would hope you would know, but maybe you inherited this or you wrote this tool for other devs on your team. What about them? Doesn’t this look nicer? node app --base 2 --exponent 3 Just by looking at the parameters, you have a good idea of what might happen. Also, what we’re going to implement, the order of the parameters doesn’t matter, other than they will be expected to be paired in such a way that it always follows the convention of name followed by value. Without parsing Command: node app 2 3 Code in app.js: const inputs = process.argv.slice(2) console.info( `${inputs[0]} raised to the power of ${inputs[1]} = ${Math.pow( inputs[0], inputs[1] )}` ) process.exit(0) Parsing function function parseArgs(args) { try { return Object.assign( ...args .slice(2) .reduce((l, r) =&amp;gt; { if (!Array.isArray(l)) l = [[l, r]] else if (r.startsWith('--')) l.push([r]) else l[l.length - 1].push(r) return l }) .map(p =&amp;gt; ({ [p[0].substring(2)]: p[1] })) ) } catch (e) { console.error('Unknown argument passed', e) return {} } } Let’s break this down. We’re using the spread operator ... on args to expand args and iterate. Essentially we’re ensuring args is an array. So we can perform the next set of operations. .slice(2) is being used to drop the first 2 arguments, which would be node and app. Now we can use .reduce(...). Reduce takes a function that takes two arguments and returns a single output. Many times you will see it depicted as taking a left and right argument, but it’s really accumulator and value. You merge the value to the accumulator. I say merge, because you’re reducing. The operation that reduces the value into the accumulator is entirely up to you, add, subtract, multiply, Array.prototype.push are all examples. The function we are using to reduce will start off by taking the first two elements of the array, l will get index 0 and r will get index 1 on the very first run. Here l is a value and not an array, so we turn l into a multi-dimensional array of [[l, r]], in our example [['--base', '2']]. The second iteration l will be the multi-dimensional array and r will be the next flag, in our example '--base'. So far the accumulator will look like [['--base', '2'], ['--exponent']]. For the last pass through we call .push() on the last array in our multi-dimensional array. This gives us a result of [['--base', '2'], ['--exponent', '3']]. If you have more, the process repeats until the end of the array. You can see here that it’s vital, and expected that you pass in paired parameters. Having a straggler without a name won’t work with this code. Next we’re calling .map() on the resulting multi-dimensional array. The map function performs an operation on each element of the array and returns the result. The end result is an equally sized array with the mapped values. For ours we are simply converting each array pair into an object. You’ll see the substring() that’s removing the expected leading -- on each name. The array ['--base', '2'] becomes the object { base: '2' }. Leaving you with an array of objects. The last piece of the puzzle is the Object.assign that everything is wrapped in. Notice that we’re using the spread operator at the beginning. This allows us to spread the object assign over each element in the array. Leading to one object { base: '2', exponent: '3' }, which we return as the result of the function, or an empty object if there was an error. All together Your app.js should look like this function parseArgs(args) { try { return Object.assign( ...args .slice(2) .reduce((l, r) =&amp;gt; { if (!Array.isArray(l)) l = [[l, r]] else if (r.startsWith('--')) l.push([r]) else l[l.length - 1].push(r) return l }) .map(p =&amp;gt; ({ [p[0].substring(2)]: p[1] })) ) } catch (e) { console.error('Unknown argument passed', e) return {} } } const opts = parseArgs(process.argv) console.info( `${opts.base} raised to the power of ${opts.exponent} = ${Math.pow( opts.base, opts.exponent )}` ) process.exit(0) And call it $ node app --base 2 --exponent 3 2 raised to the power of 3 = 8 or $ node app --exponent 3 --base 2 2 raised to the power of 3 = 8 opts will now have the value of { base: '2', exponent: '3' } no matter which way you ran the command line. It’s also a lot easier to read in the code instead of trying to figure out which variable is in what index. I also have a Gist available for easy commenting and copying.</summary></entry><entry><title type="html">Enhancing Sublime Text Context Menus on Windows</title><link href="http://localhost:4000/2015/01/04/enhancing-sublime-text-context-menus-on-windows.html" rel="alternate" type="text/html" title="Enhancing Sublime Text Context Menus on Windows" /><published>2015-01-04T11:08:59-07:00</published><updated>2015-01-04T11:08:59-07:00</updated><id>http://localhost:4000/2015/01/04/enhancing-sublime-text-context-menus-on-windows</id><content type="html" xml:base="http://localhost:4000/2015/01/04/enhancing-sublime-text-context-menus-on-windows.html">&lt;h1 id=&quot;sublime-text&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://http://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;It’s a great code editor. It can be an IDE if you want it to be, but at it’s heart it’s a highly extensible text editor. I love it! You can even get intellisense for C# now if you visit &lt;a href=&quot;http://omnisharp.net&quot;&gt;OmniSharp.net&lt;/a&gt; and follow the steps to install. I’ll do some more blogs on how I have my Sublime Text set up and one to set up OmniSharp. This is really just some quick enhancements to make a great product a little better. By the way, Sublime Text is free with some nag-ware. I highly reccomend you pay for it and support the team, I did and it was well worth it.&lt;/p&gt;

&lt;h3 id=&quot;enhancing-the-context-menu&quot;&gt;Enhancing the Context Menu&lt;/h3&gt;

&lt;p&gt;Sublime Text, by default, will give you the option to add &lt;em&gt;Open with Sublime Text&lt;/em&gt; to the context menu when right-clicking &lt;em&gt;any&lt;/em&gt; file. This is great and I use it a lot, make sure you’ve selected it during the install before starting this.&lt;/p&gt;

&lt;p&gt;One thing that I have trouble with is that I do have other context menu enhancements and the &lt;em&gt;Open with Sublime Text&lt;/em&gt; doesn’t always jump out at me. So one thing we’re going to do is add the Sublime Text icon to the existing context menu option. The other thing we’re going to do is add an &lt;strong&gt;&lt;em&gt;Open Directory with Sublime Text&lt;/em&gt;&lt;/strong&gt; action to the context menu when we right-click on a directory. All it takes is creating a .reg file to update your registry.&lt;/p&gt;

&lt;h4 id=&quot;1-create-a-file-on-your-desktop&quot;&gt;1. Create a file on your desktop&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Right-click on the desktop&lt;/li&gt;
  &lt;li&gt;Click New &amp;gt; Text Document&lt;/li&gt;
  &lt;li&gt;Name it “SublimeContext.reg” make sure to drop the .txt extension&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-open-in-notepad-or-sublime-text&quot;&gt;2. Open in Notepad (or Sublime Text)&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Make note of your installation directory of Sublime Text. I’m running Windows 8.1 with Sublime Text 3 in the default location. so for me, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\Sublime Text 3\sublime_text.exe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If your’s is the same, no need to do anything, otherwise you’ll have to edit the block below with your default installation.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy and paste the following block into your file.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Windows Registry Editor Version 5.00

 [HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text]
 &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot;
 [HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text\command]
 @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%1\&quot;&quot;

 [HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text]
 @=&quot;Open Directory with Sublime Text&quot;
 &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot;
 [HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text\command]
 @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot;

 [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text]
 @=&quot;Open Directory with Sublime Text&quot;
 &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot;
 [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text\command]
 @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and close your file.&lt;/li&gt;
  &lt;li&gt;Double-click on it and say yes, you want to add it to the registry.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;whats-it-doing&quot;&gt;What’s it doing?&lt;/h4&gt;

&lt;p&gt;I know I’m suspicious of modifying the registry, so let’s walk through each line.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text]
&quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot;
[HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text\command]
@=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%1\&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These two are merely updating an existing key. The first &lt;code class=&quot;highlighter-rouge&quot;&gt;HKEY&lt;/code&gt; is ensuring that you have the &lt;em&gt;Open with Sublime Text&lt;/em&gt; context menu. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;String Value&lt;/code&gt; is a new one we’re adding. It’s simply adding the Sublime Text icon to the context menu. The second &lt;code class=&quot;highlighter-rouge&quot;&gt;HKEY&lt;/code&gt; was an existing key that executes the command of opening the file you right-click in Sublime Text.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text]
@=&quot;Open Directory with Sublime Text&quot;
&quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot;
[HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text\command]
@=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These two add the new Open Directory with Sublime Text to the background context menu, we’ll cover each line specifically below which adds to the right-click context menu in the same way.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text]
@=&quot;Open Directory with Sublime Text&quot;
&quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot;
[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text\command]
@=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These two are completely new. This is what adds &lt;em&gt;Open Directory with Sublime Text&lt;/em&gt; to the right-click context menu. The first &lt;code class=&quot;highlighter-rouge&quot;&gt;HKEY&lt;/code&gt; adds the text to the context menu and the Icon. The second &lt;code class=&quot;highlighter-rouge&quot;&gt;HKEY&lt;/code&gt; adds the command of opening the directory you right-clicked in Sublime Text.&lt;/p&gt;

&lt;p&gt;It’s not much, but it adds a nice little touch to an amazing product. Have fun with it!&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="Sublime Text" /><category term="Context Menu" /><category term="Right Click" /><category term="Open Directory" /><category term="Open Folder" /><summary type="html">Sublime Text It’s a great code editor. It can be an IDE if you want it to be, but at it’s heart it’s a highly extensible text editor. I love it! You can even get intellisense for C# now if you visit OmniSharp.net and follow the steps to install. I’ll do some more blogs on how I have my Sublime Text set up and one to set up OmniSharp. This is really just some quick enhancements to make a great product a little better. By the way, Sublime Text is free with some nag-ware. I highly reccomend you pay for it and support the team, I did and it was well worth it. Enhancing the Context Menu Sublime Text, by default, will give you the option to add Open with Sublime Text to the context menu when right-clicking any file. This is great and I use it a lot, make sure you’ve selected it during the install before starting this. One thing that I have trouble with is that I do have other context menu enhancements and the Open with Sublime Text doesn’t always jump out at me. So one thing we’re going to do is add the Sublime Text icon to the existing context menu option. The other thing we’re going to do is add an Open Directory with Sublime Text action to the context menu when we right-click on a directory. All it takes is creating a .reg file to update your registry. 1. Create a file on your desktop Right-click on the desktop Click New &amp;gt; Text Document Name it “SublimeContext.reg” make sure to drop the .txt extension 2. Open in Notepad (or Sublime Text) Make note of your installation directory of Sublime Text. I’m running Windows 8.1 with Sublime Text 3 in the default location. so for me, it is C:\Program Files\Sublime Text 3\sublime_text.exe If your’s is the same, no need to do anything, otherwise you’ll have to edit the block below with your default installation. Copy and paste the following block into your file. Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text] &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; [HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text\command] @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%1\&quot;&quot; [HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text] @=&quot;Open Directory with Sublime Text&quot; &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; [HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text\command] @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text] @=&quot;Open Directory with Sublime Text&quot; &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text\command] @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot; Save and close your file. Double-click on it and say yes, you want to add it to the registry. What’s it doing? I know I’m suspicious of modifying the registry, so let’s walk through each line. [HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text] &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; [HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text\command] @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%1\&quot;&quot; These two are merely updating an existing key. The first HKEY is ensuring that you have the Open with Sublime Text context menu. The Icon String Value is a new one we’re adding. It’s simply adding the Sublime Text icon to the context menu. The second HKEY was an existing key that executes the command of opening the file you right-click in Sublime Text. [HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text] @=&quot;Open Directory with Sublime Text&quot; &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; [HKEY_CLASSES_ROOT\Directory\Background\shell\Sublime Text\command] @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot; These two add the new Open Directory with Sublime Text to the background context menu, we’ll cover each line specifically below which adds to the right-click context menu in the same way. [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text] @=&quot;Open Directory with Sublime Text&quot; &quot;Icon&quot;=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\Sublime Text\command] @=&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe \&quot;%V\&quot;&quot; These two are completely new. This is what adds Open Directory with Sublime Text to the right-click context menu. The first HKEY adds the text to the context menu and the Icon. The second HKEY adds the command of opening the directory you right-clicked in Sublime Text. It’s not much, but it adds a nice little touch to an amazing product. Have fun with it!</summary></entry><entry><title type="html">Setting up the package.json for node.js. The short, short version</title><link href="http://localhost:4000/2014/10/28/setting-up-the-package-json-for-node-js-the-short-short-version.html" rel="alternate" type="text/html" title="Setting up the package.json for node.js. The short, short version" /><published>2014-10-28T11:08:59-07:00</published><updated>2014-10-28T11:08:59-07:00</updated><id>http://localhost:4000/2014/10/28/setting-up-the-package-json-for-node-js-the-short-short-version</id><content type="html" xml:base="http://localhost:4000/2014/10/28/setting-up-the-package-json-for-node-js-the-short-short-version.html">&lt;h1 id=&quot;packagejson&quot;&gt;Package.json&lt;/h1&gt;

&lt;p&gt;Most tutorials start with the package.json. This is a very important step. Here’s an example of a live package.json, this is Ghost v0.5’s package.json:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ghost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Just a blogging platform.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ghost Foundation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://ghost.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ghost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cms&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git://github.com/TryGhost/Ghost.git&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bugs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/TryGhost/Ghost/issues&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;contributors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/TryGhost/Ghost/graphs/contributors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;licenses&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://raw.github.com/TryGhost/Ghost/master/LICENSE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./core/index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./node_modules/.bin/grunt validate --verbose&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;engines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.10.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;engineStrict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bcryptjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.7.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body-parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.6.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bookshelf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.7.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;busboy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;colors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.6.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;compression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.0.0-rc.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connect-slashes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cookie-parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;downsize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.8.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express-hbs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.7.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express-session&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fs-extra&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.8.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html-to-text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;knex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.6.21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lodash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.4.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;moment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.4.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;morgan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node-polyglot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node-uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.4.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nodemailer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.5.13&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;oauth2orize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passport-http-bearer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passport-oauth2-client-password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;semver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;showdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/ErisDS/showdown/archive/v0.3.2-ghost.tar.gz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sqlite3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static-favicon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unidecode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;validator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.4.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;when&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.12&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;optionalDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.1.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blanket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.1.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bower&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.3.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.4.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-cli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.1.13&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-concat-sourcemap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.4.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-contrib-clean&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-contrib-compress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.5.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-contrib-concat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.4.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-contrib-copy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.4.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-contrib-jshint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.8.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-contrib-uglify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-contrib-watch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.5.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-docker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-ember-templates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.4.18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-es6-module-transpiler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.6.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-express-server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.4.11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-mocha-cli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.4.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.7.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt-update-submodules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.4.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;matchdep&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.15.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.27.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rewire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~2.29.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;require-dir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;should&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~2.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sinon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~1.7.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;supertest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~0.8.2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;optionalDependencies&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; sections. These list the referenced packages that are required for the system to work. When you clone Ghost you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ghost $ npm install&lt;/code&gt; from inside the Ghost directory and all the dependent packages will be retrived. If you’re a .NET developer, you can think of these as References, or better yet, NuGet packages with the “auto-download missing packages” feature enabled.&lt;/p&gt;

&lt;p&gt;The scripts section allow you to run the application by aliasing &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ghost $ node index&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ghost $ npm start&lt;/code&gt;. Additionally you can run the test suite by using &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ghost $ npm test&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; “understands” these as default scripts. So what makes this the short, short version?&lt;/p&gt;

&lt;h3 id=&quot;rapid-setup&quot;&gt;Rapid setup&lt;/h3&gt;

&lt;p&gt;Don’t bother with trying to create the package.json yourself. You can tweak it by hand for sure, but there are much simpler ways to create it. Ways like this:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir myProj
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myProj
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;&lt;/strong&gt; is a tool that will walk you through creating a package.json via a cli wizard. Just answer the questions it asks you like this:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sane defaults.

See &lt;span class=&quot;s1&quot;&gt;'npm help json'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;definitive documentation on these fields
and exactly what they &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Use &lt;span class=&quot;s1&quot;&gt;'npm install &amp;lt;pkg&amp;gt; --save'&lt;/span&gt; afterwards to install a package and
save it as a dependency &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the package.json file.

Press ^C at any &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;to quit.
name: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;myProj&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; MyProj
version: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0.0.1
description: Sample npm init
entry point: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index.js&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; app.js
&lt;span class=&quot;nb&quot;&gt;test command&lt;/span&gt;:
git repository: &amp;lt;git repo url &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;applicable&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt;
keywords: npm, node, tutorial, package.json
author: Alexander Kahoun
license: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ISC&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; MIT
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;MyProj&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Sample npm init&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;app.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;git repo url (if applicable)&amp;gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;tutorial&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;package.json&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Alexander Kahoun&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


Is this ok? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;yes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you have a package.json all ready to go. Another cool tip, you can auto-save dependencies to your package.json as you go. All you need to do is add a flag to your &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;lt;packageName&amp;gt;&lt;/code&gt; command. For instance:
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/myProj $ npm install mongoose --save&lt;/code&gt;
will both install mongoose into your myProj directory &lt;em&gt;and&lt;/em&gt; it will add the following to your package.json:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongoose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.8.18&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install mongoose --save-dev&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install mongoose --save-optional&lt;/code&gt; will install the packages just the same, but put them into your package.json in the &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; section or &lt;code class=&quot;highlighter-rouge&quot;&gt;optionalDependencies&lt;/code&gt; sections respectively.&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;Tl;dr&lt;/h3&gt;

&lt;h4 id=&quot;too-long-didnt-read&quot;&gt;Too long; didn’t read&lt;/h4&gt;

&lt;p&gt;Make sure you use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;lt;package&amp;gt; --save&lt;/code&gt; for quick setup of a project:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir myProj
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myProj
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Answer the questions it asks you, don’t be afraid to leave them blank if you don’t know.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &amp;lt;package&amp;gt; &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Repeat as necessary.&lt;/p&gt;

&lt;h3 id=&quot;gotchas&quot;&gt;Gotcha’s&lt;/h3&gt;

&lt;p&gt;You may want to be careful with some of the packages. Some packages like express.js are great for rapid setup, but when you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt; command to set up your project, it &lt;em&gt;will&lt;/em&gt; overwrite any existing package.json. So if you have a package that sets up your package.json for you, make sure to install your dependencies &lt;em&gt;after&lt;/em&gt; you run the command.&lt;/p&gt;

&lt;h4 id=&quot;happy-coding&quot;&gt;Happy coding!&lt;/h4&gt;</content><author><name></name></author><category term="node.js" /><category term="node" /><category term="package.json" /><category term="tutorial" /><category term="npm" /><category term="npm install" /><category term="npm init" /><summary type="html">Package.json Most tutorials start with the package.json. This is a very important step. Here’s an example of a live package.json, this is Ghost v0.5’s package.json: { &quot;name&quot; : &quot;ghost&quot;, &quot;version&quot; : &quot;0.5.0&quot;, &quot;description&quot; : &quot;Just a blogging platform.&quot;, &quot;author&quot; : &quot;Ghost Foundation&quot;, &quot;homepage&quot; : &quot;http://ghost.org&quot;, &quot;keywords&quot; : [ &quot;ghost&quot;, &quot;blog&quot;, &quot;cms&quot; ], &quot;repository&quot; : { &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;git://github.com/TryGhost/Ghost.git&quot; }, &quot;bugs&quot; : &quot;https://github.com/TryGhost/Ghost/issues&quot;, &quot;contributors&quot;: &quot;https://github.com/TryGhost/Ghost/graphs/contributors&quot;, &quot;licenses&quot; : [ { &quot;type&quot;: &quot;MIT&quot;, &quot;url&quot;: &quot;https://raw.github.com/TryGhost/Ghost/master/LICENSE&quot; } ], &quot;main&quot;: &quot;./core/index&quot;, &quot;scripts&quot;: { &quot;start&quot;: &quot;node index&quot;, &quot;test&quot;: &quot;./node_modules/.bin/grunt validate --verbose&quot; }, &quot;engines&quot;: { &quot;node&quot;: &quot;~0.10.0&quot; }, &quot;engineStrict&quot;: true, &quot;dependencies&quot;: { &quot;bcryptjs&quot;: &quot;0.7.10&quot;, &quot;body-parser&quot;: &quot;1.6.3&quot;, &quot;bookshelf&quot;: &quot;0.7.6&quot;, &quot;busboy&quot;: &quot;0.2.3&quot;, &quot;colors&quot;: &quot;0.6.2&quot;, &quot;compression&quot;: &quot;^1.0.2&quot;, &quot;connect&quot;: &quot;3.0.0-rc.1&quot;, &quot;connect-slashes&quot;: &quot;1.2.0&quot;, &quot;cookie-parser&quot;: &quot;1.0.1&quot;, &quot;downsize&quot;: &quot;0.0.5&quot;, &quot;express&quot;: &quot;4.8.3&quot;, &quot;express-hbs&quot;: &quot;0.7.10&quot;, &quot;express-session&quot;: &quot;1.0.4&quot;, &quot;fs-extra&quot;: &quot;0.8.1&quot;, &quot;html-to-text&quot;: &quot;^0.1.0&quot;, &quot;knex&quot;: &quot;0.6.21&quot;, &quot;lodash&quot;: &quot;2.4.1&quot;, &quot;moment&quot;: &quot;2.4.0&quot;, &quot;morgan&quot;: &quot;1.0.0&quot;, &quot;node-polyglot&quot;: &quot;0.3.0&quot;, &quot;node-uuid&quot;: &quot;1.4.1&quot;, &quot;nodemailer&quot;: &quot;0.5.13&quot;, &quot;oauth2orize&quot;: &quot;1.0.1&quot;, &quot;passport&quot;: &quot;0.2.0&quot;, &quot;passport-http-bearer&quot;: &quot;1.0.1&quot;, &quot;passport-oauth2-client-password&quot;: &quot;0.1.1&quot;, &quot;rss&quot;: &quot;0.2.1&quot;, &quot;semver&quot;: &quot;2.2.1&quot;, &quot;showdown&quot;: &quot;https://github.com/ErisDS/showdown/archive/v0.3.2-ghost.tar.gz&quot;, &quot;sqlite3&quot;: &quot;2.2.3&quot;, &quot;static-favicon&quot;: &quot;1.0.2&quot;, &quot;unidecode&quot;: &quot;0.1.3&quot;, &quot;validator&quot;: &quot;3.4.0&quot;, &quot;when&quot;: &quot;3.2.3&quot;, &quot;xml&quot;: &quot;0.0.12&quot; }, &quot;optionalDependencies&quot;: { &quot;mysql&quot;: &quot;2.1.1&quot; }, &quot;devDependencies&quot;: { &quot;blanket&quot;: &quot;~1.1.5&quot;, &quot;bower&quot;: &quot;~1.3.5&quot;, &quot;grunt&quot;: &quot;~0.4.1&quot;, &quot;grunt-cli&quot;: &quot;~0.1.13&quot;, &quot;grunt-concat-sourcemap&quot;: &quot;~0.4.3&quot;, &quot;grunt-contrib-clean&quot;: &quot;~0.5.0&quot;, &quot;grunt-contrib-compress&quot;: &quot;~0.5.2&quot;, &quot;grunt-contrib-concat&quot;: &quot;~0.4.0&quot;, &quot;grunt-contrib-copy&quot;: &quot;~0.4.1&quot;, &quot;grunt-contrib-jshint&quot;: &quot;~0.8.0&quot;, &quot;grunt-contrib-uglify&quot;: &quot;~0.5.0&quot;, &quot;grunt-contrib-watch&quot;: &quot;~0.5.3&quot;, &quot;grunt-docker&quot;: &quot;~0.0.8&quot;, &quot;grunt-ember-templates&quot;: &quot;~0.4.18&quot;, &quot;grunt-es6-module-transpiler&quot;: &quot;~0.6.0&quot;, &quot;grunt-express-server&quot;: &quot;~0.4.11&quot;, &quot;grunt-mocha-cli&quot;: &quot;~1.4.0&quot;, &quot;grunt-shell&quot;: &quot;~0.7.0&quot;, &quot;grunt-update-submodules&quot;: &quot;~0.4.0&quot;, &quot;matchdep&quot;: &quot;~0.3.0&quot;, &quot;mocha&quot;: &quot;~1.15.1&quot;, &quot;nock&quot;: &quot;0.27.2&quot;, &quot;rewire&quot;: &quot;~2.0.0&quot;, &quot;request&quot;: &quot;~2.29.0&quot;, &quot;require-dir&quot;: &quot;~0.1.0&quot;, &quot;should&quot;: &quot;~2.1.1&quot;, &quot;sinon&quot;: &quot;~1.7.3&quot;, &quot;supertest&quot;: &quot;~0.8.2&quot; } } Notice the dependencies, optionalDependencies, and devDependencies sections. These list the referenced packages that are required for the system to work. When you clone Ghost you can run ~/ghost $ npm install from inside the Ghost directory and all the dependent packages will be retrived. If you’re a .NET developer, you can think of these as References, or better yet, NuGet packages with the “auto-download missing packages” feature enabled. The scripts section allow you to run the application by aliasing ~/ghost $ node index for ~/ghost $ npm start. Additionally you can run the test suite by using ~/ghost $ npm test. npm “understands” these as default scripts. So what makes this the short, short version? Rapid setup Don’t bother with trying to create the package.json yourself. You can tweak it by hand for sure, but there are much simpler ways to create it. Ways like this: $ mkdir myProj $ cd myProj $ npm init npm init is a tool that will walk you through creating a package.json via a cli wizard. Just answer the questions it asks you like this: This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sane defaults. See 'npm help json' for definitive documentation on these fields and exactly what they do. Use 'npm install &amp;lt;pkg&amp;gt; --save' afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. name: (myProj) MyProj version: (1.0.0) 0.0.1 description: Sample npm init entry point: (index.js) app.js test command: git repository: &amp;lt;git repo url (if applicable)&amp;gt; keywords: npm, node, tutorial, package.json author: Alexander Kahoun license: (ISC) MIT { &quot;name&quot;: &quot;MyProj&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;description&quot;: &quot;Sample npm init&quot;, &quot;main&quot;: &quot;app.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot; }, &quot;repository&quot;: { &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;&amp;lt;git repo url (if applicable)&amp;gt;&quot; }, &quot;keywords&quot;: [ &quot;npm&quot;, &quot;node&quot;, &quot;tutorial&quot;, &quot;package.json&quot; ], &quot;author&quot;: &quot;Alexander Kahoun&quot;, &quot;license&quot;: &quot;MIT&quot; } Is this ok? (yes) yes Now you have a package.json all ready to go. Another cool tip, you can auto-save dependencies to your package.json as you go. All you need to do is add a flag to your npm install &amp;lt;packageName&amp;gt; command. For instance: ~/myProj $ npm install mongoose --save will both install mongoose into your myProj directory and it will add the following to your package.json: &quot;dependencies&quot;: { &quot;mongoose&quot;: &quot;^3.8.18&quot; } Alternatively npm install mongoose --save-dev or npm install mongoose --save-optional will install the packages just the same, but put them into your package.json in the devDependencies section or optionalDependencies sections respectively. Tl;dr Too long; didn’t read Make sure you use npm init and npm install &amp;lt;package&amp;gt; --save for quick setup of a project: $ mkdir myProj $ cd myProj $ npm init Answer the questions it asks you, don’t be afraid to leave them blank if you don’t know. $ npm install &amp;lt;package&amp;gt; --save Repeat as necessary. Gotcha’s You may want to be careful with some of the packages. Some packages like express.js are great for rapid setup, but when you run the express command to set up your project, it will overwrite any existing package.json. So if you have a package that sets up your package.json for you, make sure to install your dependencies after you run the command. Happy coding!</summary></entry><entry><title type="html">Virtual Desktops for Windows</title><link href="http://localhost:4000/2014/08/24/virtual-desktops-for-windows.html" rel="alternate" type="text/html" title="Virtual Desktops for Windows" /><published>2014-08-24T11:08:59-07:00</published><updated>2014-08-24T11:08:59-07:00</updated><id>http://localhost:4000/2014/08/24/virtual-desktops-for-windows</id><content type="html" xml:base="http://localhost:4000/2014/08/24/virtual-desktops-for-windows.html">&lt;p&gt;There’s been some speculation of Windows finally getting virtual desktops as a feature in &lt;a href=&quot;http://www.pcworld.com/article/2462641/windows-9-goodbye-charms-bar-hello-virtual-desktops.html&quot;&gt;Windows 9&lt;/a&gt;. To be honest, this is a very welcome change. After all, Linux has had it for almost 20 years now.&lt;/p&gt;

&lt;p&gt;If you’d like to get it now and you’re running XP, Vista, 7, 8, or 8.1 (meaning you’re not from the past), you can get the functionality right now with &lt;a href=&quot;http://www.dexpot.de/&quot;&gt;Dexpot&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gsxdug.bn1304.livefilestore.com/y4mVAWVAbc-9jWWR-CWdWu5EP-C-RSeS5mHw6e_Vpy8Xe3aU2p_K8Xf2Qw2sHtx0FX04u-SviVB8xdIQatl3wbomlVSgKJB6d7tRQd3z7pa7SwrnU8A8wkKKBBC_0_3Q32wNQu7zFogl7PgXsZI6gm9udeKyy-pWc-Khsu_MYPuls6NXCUPjFD2ZffjODzLYRJ-Hh4w2zquJyO9i39JyCAAQQ&quot; alt=&quot;desktop lotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dexpot is free for private use and only costs $32 for a single user license. Free is great, but it’s always nice to support your friendly devs, especially when they provide such an incredible tool.&lt;/p&gt;

&lt;p&gt;You can configure your Windows system to function with Virtual Desktops suprisingly similar to Mac OS X desktops. I personally have it set up with 4 virtual desktops with a filmstrip animation. You can configure all your hot keys to scroll between them, jump to a specific one, navigate with the mouse or double click on the icon to view all desktops (as seen above).&lt;/p&gt;

&lt;p&gt;Out of the box you’ll be able to double click and select a desktop, no cofiguration necessary. Here is a list of default actions and what they do for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Shift + Mouse Wheel&lt;/code&gt;: Scroll through virtual desktops.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt + 1&lt;/code&gt;: Go to desktop 1, change the 1 to any number and jump to that desktop.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Win + F2&lt;/code&gt;: Display all active programs on the current desktop expose-style.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Win + F3&lt;/code&gt;: Show all desktops, same as double-clicking the icon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just a small sample of what you can do with Dexpot, it’s a really great tool.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-filmstrip-animation&quot;&gt;Setting up Filmstrip animation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://gsxeug.bn1304.livefilestore.com/y4mmT36RpNW1iK-RWbtLMog97KmptS-ormmJq-oE0AvRJPMbA_f9_8DfPQD4YgfyvhRSgE8ALiE0NiOpjqT3ZFWj8Y3amecSkxE0obZJmIJlZBLKGqj_uaHr0G_n0LXFfyt4Nb6b8keGRSij1kI8aRxQtXQiBcuH3HF9bvm6uMf8qPblHc4LKKA4n_gejd6GDzFezMAEFYEkPUbTmH0fW_NFQ&quot; alt=&quot;desktop lotus 2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the Dexpot settings by right-clicking the icon in the notification area and selecting &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Go to the last option of &lt;em&gt;Plugins and Extras&lt;/em&gt;. Make sure you have Dexcube enabled. Select it and click the configure button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hegmfq.bn1304.livefilestore.com/y4mVuhYIjj3nHQKd9iNJTl-QAQKSVfb2YJjEGrTG5eZEDoHbLmKmogY7ofh9Osz5Fs1H2CbafKQR0mQfIIXitbAl-kapuXLfnmgFAcbO2JAdJ7utvzKxiy2x5nAjfstbmAs5uI_ci7lTWYC3V8vpANKy7NJ2IKM9lr3v31--PiiBv4W1fxwez3r-53pdtglVg_GWAJk4lUa2XFDKrTiUSEKjw&quot; alt=&quot;dexpot settings 1&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I personally like the filmstrip option becuase it’s most like my Mac, but there are a bunch of options. Choose the one you like most. You can also adjust the animation speeds on the right. You’ll notice that I’ve sped up my transition from the default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://g0gffq.bn1304.livefilestore.com/y4mTupGtfgqQvscY24fNtSDyc0OEp1IT-Wzx6zMvQcfXHbt0rh9sVV11Gf6SSPEhbWEsChjBaCBqi3Vc4fNj8Zlk4ge96Vo3qfANjpAtWL4bXP260nGAlopSOO8g76A6eMzEZ6-lucnBalweeGGEJw9gL8H-HvhtL9FjgFY_XQdo8YHD0p26eCouViv0f_5hqhzgcMBAmKwFb6PHcWcO6oPrw&quot; alt=&quot;dexpot settings 2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Have fun with multiple desktops in Windows right now!&lt;/p&gt;

&lt;h3 id=&quot;memory-concerns&quot;&gt;Memory concerns&lt;/h3&gt;

&lt;p&gt;I have none personally. Dexpot is really good on memory. As you can see from the task manager screen shot below, Dexpot and all it’s plugins take up a total of 11.7MB. If that’s a concern for you, you may want to consider upgrading your system or time-travelling here from 1996 (since you’re living in the past, you may not have a compatible OS either).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hegnfq.bn1304.livefilestore.com/y4mFryp-6FFCMoAi-IPCWKNrpxLFpZtD6CDEUL5yv7BhPTgfXHUVucxWB1BwYKOoWsMFvk076JcYd09dIVB7UbDi_-ZgPUCyi4utkKNQlsG1F6A0epsBCiTM0gzNy0wE6KmmiqP_WREohwlMsrSkHdBAT6bufD5eFHytZ-UdybOH4nMgHDgsZIXlhLOcojnmFcnIiyWMDwy--7RCHhF2wZ35Q&quot; alt=&quot;task manager&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="Tools" /><category term="Software" /><category term="Virtual Desktops" /><category term="Multiple Desktops" /><summary type="html">There’s been some speculation of Windows finally getting virtual desktops as a feature in Windows 9. To be honest, this is a very welcome change. After all, Linux has had it for almost 20 years now. If you’d like to get it now and you’re running XP, Vista, 7, 8, or 8.1 (meaning you’re not from the past), you can get the functionality right now with Dexpot! Dexpot is free for private use and only costs $32 for a single user license. Free is great, but it’s always nice to support your friendly devs, especially when they provide such an incredible tool. You can configure your Windows system to function with Virtual Desktops suprisingly similar to Mac OS X desktops. I personally have it set up with 4 virtual desktops with a filmstrip animation. You can configure all your hot keys to scroll between them, jump to a specific one, navigate with the mouse or double click on the icon to view all desktops (as seen above). Out of the box you’ll be able to double click and select a desktop, no cofiguration necessary. Here is a list of default actions and what they do for you: Ctrl + Shift + Mouse Wheel: Scroll through virtual desktops. Alt + 1: Go to desktop 1, change the 1 to any number and jump to that desktop. Win + F2: Display all active programs on the current desktop expose-style. Win + F3: Show all desktops, same as double-clicking the icon This is just a small sample of what you can do with Dexpot, it’s a really great tool. Setting up Filmstrip animation Open the Dexpot settings by right-clicking the icon in the notification area and selecting Settings. Go to the last option of Plugins and Extras. Make sure you have Dexcube enabled. Select it and click the configure button. I personally like the filmstrip option becuase it’s most like my Mac, but there are a bunch of options. Choose the one you like most. You can also adjust the animation speeds on the right. You’ll notice that I’ve sped up my transition from the default. That’s it! Have fun with multiple desktops in Windows right now! Memory concerns I have none personally. Dexpot is really good on memory. As you can see from the task manager screen shot below, Dexpot and all it’s plugins take up a total of 11.7MB. If that’s a concern for you, you may want to consider upgrading your system or time-travelling here from 1996 (since you’re living in the past, you may not have a compatible OS either). Enjoy!</summary></entry><entry><title type="html">The Importance of the Ubiquitous Language</title><link href="http://localhost:4000/2014/06/29/the-importance-of-the-ubiquitous-language-2.html" rel="alternate" type="text/html" title="The Importance of the Ubiquitous Language" /><published>2014-06-29T11:08:59-07:00</published><updated>2014-06-29T11:08:59-07:00</updated><id>http://localhost:4000/2014/06/29/the-importance-of-the-ubiquitous-language-2</id><content type="html" xml:base="http://localhost:4000/2014/06/29/the-importance-of-the-ubiquitous-language-2.html">&lt;h3 id=&quot;ubiquitous-yoo-bikwitəss&quot;&gt;Ubiquitous: &lt;em&gt;/yoo-bikwitəss/&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;existing everywhere: present everywhere at once, or seeming to be&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;language-láng-gwij&quot;&gt;Language: &lt;em&gt;/láng-gwij/&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;communication with words: the human use of spoken or written words as a communication system&lt;/li&gt;
  &lt;li&gt;speech of group: the speech of a country, region, or group of people, including its vocabulary, syntax, and grammar&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;system of communication: a system of communication with its own set of conventions or special words&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ubiquitous-language&quot;&gt;Ubiquitous Language:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;system of communication: a system of communication with its own set of conventions or special words that exists everywhere within a given business domain&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eric Evans first coined the term in his book on &lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software-ebook/dp/B00794TAUG/ref=tmm_kin_title_0&quot;&gt;Domain Driven Design&lt;/a&gt;, which is available in kindle-edition now by the way. If you haven’t read it, I recommend adding it to you reasing list. I’ll hone in on the same excerpt that Martin Fowler did in his &lt;a href=&quot;http://martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;post on the topic&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By using the model-based language pervasively and not being satisfied until it flows, we approach a model that is complete and comprehensible, made up ofsimple elements that combine to express complex ideas.&lt;/p&gt;

  &lt;p&gt;Domain experts should object to terms or structures that are awkward or inadequate to convey domain understanding; developers should watch for ambiguity or inconsistency that will trip up design.&lt;/p&gt;

  &lt;p&gt;– Eric Evans&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I start a new project, no matter how big or small, I like to take the time to fully understand what the users do as a workflow. I think all of us do to some extent. UX experts create &lt;a href=&quot;http://www.uxmatters.com/mt/archives/2011/09/the-value-of-customer-journey-maps-a-ux-designers-personal-journey.php&quot;&gt;Journey Maps&lt;/a&gt; to illustrate what they’ve learned from such sessions. I like to put together a Ubiquitous Language Dictionary. It’s more of a wiki though, to be honest.&lt;/p&gt;

&lt;p&gt;I’m sure you’re familiar with the adage, “Measure twice, cut once.” This is part of the measuring process. You are measuring your, and potentially the team’s, understanding of the domain you are working in. In some cases you will be testing the users’ knowledge as well. People are creatures of habit and we tend to do things without asking why, because it simply works. Your job is to ask why and to keep asking it until you’ve reached the bottom. Case in point, &lt;a href=&quot;http://www.etymonline.com/index.php?term=Wednesday&quot;&gt;why is Wednesday spelled as it is?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I set out to start my dictionary for a project, I aim to gather two things right away; Nouns and Verbs. Nouns are, well, nouns. They are things like Product, Order, Employee, Manager, User, etc. Verbs are what you do with the nouns, Place an Order, Hire an Employee, Sell a Product, etc. In terms of self-documenting code, you can take the Nouns and make them your Domain classes or abstractions; Verbs become your methods either on the Domain classes or in an Application Service layer, if you’ve chosen that path. That’s really another discussion though. This allows me to have a solid foundation to start with before the complexities come into play.&lt;/p&gt;

&lt;p&gt;The complexities are that you almost always are going to have different user types or personas that use the system in different ways. A Product to a Customer means something different than a Product means to a Seller. They may have many similar properties, but the verbs around them to each persona could vary greatly. A Seller &lt;em&gt;Sells&lt;/em&gt; a Product, a Customer &lt;em&gt;Buys&lt;/em&gt; a Product. It’s these nuances that you have to identify and figure out. This is where it gets complex in that you need to make sure you identify the global domain definition of a Product and its Verbs and what the Product means to all the different personas. It’s okay to have a Noun and/or Verb listed multiple times in different, or similar, ways for each persona involved. So expect to have global Nouns and Verbs along with persona specific Nouns and Verbs. The separation is what Evans refers to as Contexts. In a given context Product means [insert definition here].&lt;/p&gt;

&lt;p&gt;So why is this any more important than any other requirements gathering? Well this is where it all starts and ends, communication. If you’re taking the time to speak and write code in the language of the customer, you reduce miscommunication and increase supportability of your software. It’s been said that &lt;a href=&quot;http://www.jeremybytes.com/Downloads/CleanCode.pdf&quot;&gt;homicidal maniacs read code too&lt;/a&gt;, make it easy on them so that when a user says, “Hey, I can’t place an order,” the next developer supporting the software can easily find the PlaceOrder method and start there. Your code now mimics the language of the user(s).&lt;/p&gt;

&lt;p&gt;At the end of the day, if you’re able to articulate to users the issues you’re having or ask them about processes in their own language you will get a much more valuable response if you’re all using the same vernacular. One thing that should set off red flags for you is when someone says you can use multiple terms for the same thing. Why? Are they truly the same? Are they the same thing, but at different phases in its life-cycle? Who uses which term when? These are the questions you need to ask when you encounter this. Keep in mind that language is a complex medium. It won’t always be easy, but you can do it.&lt;/p&gt;

&lt;h3 id=&quot;conways-law&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Conway%27s_Law&quot;&gt;Conway’s Law&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations&lt;/p&gt;

  &lt;p&gt;– Melvin Conway&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another way of putting it is, why not try to change the communication structure of a team to match a system design that you want to build.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;</content><author><name></name></author><category term="Development" /><category term="Coding" /><category term="Ubiquitous Language" /><summary type="html">Ubiquitous: /yoo-bikwitəss/ existing everywhere: present everywhere at once, or seeming to be Language: /láng-gwij/ communication with words: the human use of spoken or written words as a communication system speech of group: the speech of a country, region, or group of people, including its vocabulary, syntax, and grammar system of communication: a system of communication with its own set of conventions or special words Ubiquitous Language: system of communication: a system of communication with its own set of conventions or special words that exists everywhere within a given business domain Eric Evans first coined the term in his book on Domain Driven Design, which is available in kindle-edition now by the way. If you haven’t read it, I recommend adding it to you reasing list. I’ll hone in on the same excerpt that Martin Fowler did in his post on the topic. By using the model-based language pervasively and not being satisfied until it flows, we approach a model that is complete and comprehensible, made up ofsimple elements that combine to express complex ideas. Domain experts should object to terms or structures that are awkward or inadequate to convey domain understanding; developers should watch for ambiguity or inconsistency that will trip up design. – Eric Evans When I start a new project, no matter how big or small, I like to take the time to fully understand what the users do as a workflow. I think all of us do to some extent. UX experts create Journey Maps to illustrate what they’ve learned from such sessions. I like to put together a Ubiquitous Language Dictionary. It’s more of a wiki though, to be honest. I’m sure you’re familiar with the adage, “Measure twice, cut once.” This is part of the measuring process. You are measuring your, and potentially the team’s, understanding of the domain you are working in. In some cases you will be testing the users’ knowledge as well. People are creatures of habit and we tend to do things without asking why, because it simply works. Your job is to ask why and to keep asking it until you’ve reached the bottom. Case in point, why is Wednesday spelled as it is? When I set out to start my dictionary for a project, I aim to gather two things right away; Nouns and Verbs. Nouns are, well, nouns. They are things like Product, Order, Employee, Manager, User, etc. Verbs are what you do with the nouns, Place an Order, Hire an Employee, Sell a Product, etc. In terms of self-documenting code, you can take the Nouns and make them your Domain classes or abstractions; Verbs become your methods either on the Domain classes or in an Application Service layer, if you’ve chosen that path. That’s really another discussion though. This allows me to have a solid foundation to start with before the complexities come into play. The complexities are that you almost always are going to have different user types or personas that use the system in different ways. A Product to a Customer means something different than a Product means to a Seller. They may have many similar properties, but the verbs around them to each persona could vary greatly. A Seller Sells a Product, a Customer Buys a Product. It’s these nuances that you have to identify and figure out. This is where it gets complex in that you need to make sure you identify the global domain definition of a Product and its Verbs and what the Product means to all the different personas. It’s okay to have a Noun and/or Verb listed multiple times in different, or similar, ways for each persona involved. So expect to have global Nouns and Verbs along with persona specific Nouns and Verbs. The separation is what Evans refers to as Contexts. In a given context Product means [insert definition here]. So why is this any more important than any other requirements gathering? Well this is where it all starts and ends, communication. If you’re taking the time to speak and write code in the language of the customer, you reduce miscommunication and increase supportability of your software. It’s been said that homicidal maniacs read code too, make it easy on them so that when a user says, “Hey, I can’t place an order,” the next developer supporting the software can easily find the PlaceOrder method and start there. Your code now mimics the language of the user(s). At the end of the day, if you’re able to articulate to users the issues you’re having or ask them about processes in their own language you will get a much more valuable response if you’re all using the same vernacular. One thing that should set off red flags for you is when someone says you can use multiple terms for the same thing. Why? Are they truly the same? Are they the same thing, but at different phases in its life-cycle? Who uses which term when? These are the questions you need to ask when you encounter this. Keep in mind that language is a complex medium. It won’t always be easy, but you can do it. Conway’s Law organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations – Melvin Conway Another way of putting it is, why not try to change the communication structure of a team to match a system design that you want to build. Happy Coding!</summary></entry><entry><title type="html">Why are you using source control?</title><link href="http://localhost:4000/2014/04/04/why-are-you-using-source-control.html" rel="alternate" type="text/html" title="Why are you using source control?" /><published>2014-04-04T11:08:59-07:00</published><updated>2014-04-04T11:08:59-07:00</updated><id>http://localhost:4000/2014/04/04/why-are-you-using-source-control</id><content type="html" xml:base="http://localhost:4000/2014/04/04/why-are-you-using-source-control.html">&lt;h1 id=&quot;top-reasons&quot;&gt;Top Reasons&lt;/h1&gt;

&lt;h4 id=&quot;1-save-code-other-than-on-a-local-drive&quot;&gt;1. Save code other than on a local drive&lt;/h4&gt;

&lt;h4 id=&quot;2-share-code-among-teams&quot;&gt;2. Share code among teams&lt;/h4&gt;

&lt;h4 id=&quot;3-version-control&quot;&gt;3. Version Control&lt;/h4&gt;

&lt;p&gt;Everyone that uses source control will list these reasons. I list all these reasons. They’re all perfectly accurate too, butare you &lt;em&gt;really&lt;/em&gt; using it for all three reasons?&lt;/p&gt;

&lt;h3 id=&quot;save-code-other-than-on-a-local-drive&quot;&gt;Save code other than on a local drive&lt;/h3&gt;

&lt;p&gt;Of course you do this, if you’re using any kind of source control server you can’t get away from it. This is, after all, one of the prime selling points to business if they don’t understand why you need it. All you have to do is explain that if you don’t do this all of the code could be lost in the blink of an eye. You’re laptop or computer could get stolen, you’re hard drive could fail, you could get hit by a bus… The list goes on, but I’m sure you’re well familiar with it.&lt;/p&gt;

&lt;h3 id=&quot;share-code-among-teams&quot;&gt;Share code among teams&lt;/h3&gt;

&lt;p&gt;Again, if you’re on a team you most likely are already doing this. Unless you’re emailing eachother the zipped up source code or all working on a network share. ::shudder::&lt;/p&gt;

&lt;h3 id=&quot;version-control&quot;&gt;Version Control&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s where it gets interesting. Are you really taking advantage of the version control capabilities of your source control provider? Every change you commit is stored in the history. To truly realize this functionality you should be committing as often as possible. Depending on your version control system, this doesn’t always mean pushing it to the source control server, but creating a bookmark for yourself. More of a personal stash that’s stored locally or on a server.&lt;/p&gt;

&lt;p&gt;Far too often I encounter a file/module/component with the suffix V2 with no good reason. There are always exceptions to this, so if you encounter a V2 or Vn don’t fly off the handle until you’re sure previous versions truly aren’t needed… &lt;em&gt;then&lt;/em&gt; fly off the handle. ;)&lt;/p&gt;

&lt;p&gt;See if you are concerned about rolling back or commenting out old code, please don’t. This is exactly one of the reasons that version control exists in the first place.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><category term="Source Control" /><summary type="html">Top Reasons 1. Save code other than on a local drive 2. Share code among teams 3. Version Control Everyone that uses source control will list these reasons. I list all these reasons. They’re all perfectly accurate too, butare you really using it for all three reasons? Save code other than on a local drive Of course you do this, if you’re using any kind of source control server you can’t get away from it. This is, after all, one of the prime selling points to business if they don’t understand why you need it. All you have to do is explain that if you don’t do this all of the code could be lost in the blink of an eye. You’re laptop or computer could get stolen, you’re hard drive could fail, you could get hit by a bus… The list goes on, but I’m sure you’re well familiar with it. Share code among teams Again, if you’re on a team you most likely are already doing this. Unless you’re emailing eachother the zipped up source code or all working on a network share. ::shudder:: Version Control … Here’s where it gets interesting. Are you really taking advantage of the version control capabilities of your source control provider? Every change you commit is stored in the history. To truly realize this functionality you should be committing as often as possible. Depending on your version control system, this doesn’t always mean pushing it to the source control server, but creating a bookmark for yourself. More of a personal stash that’s stored locally or on a server. Far too often I encounter a file/module/component with the suffix V2 with no good reason. There are always exceptions to this, so if you encounter a V2 or Vn don’t fly off the handle until you’re sure previous versions truly aren’t needed… then fly off the handle. ;) See if you are concerned about rolling back or commenting out old code, please don’t. This is exactly one of the reasons that version control exists in the first place.</summary></entry><entry><title type="html">Constant Vigilance: Classes or Structs in C#</title><link href="http://localhost:4000/2014/03/19/constant-vigilance-classes-or-structs-in-c.html" rel="alternate" type="text/html" title="Constant Vigilance: Classes or Structs in C#" /><published>2014-03-19T11:08:59-07:00</published><updated>2014-03-19T11:08:59-07:00</updated><id>http://localhost:4000/2014/03/19/constant-vigilance-classes-or-structs-in-c</id><content type="html" xml:base="http://localhost:4000/2014/03/19/constant-vigilance-classes-or-structs-in-c.html">&lt;p&gt;I’m going to have a recurring theme on the blog from time to time. I’ll probably have several, but this is the first. The theme here is constant vigilance. The same advice that Mad-Eye Moody gives to Harry Potter in the books. The constant vigilance theme will address poor coding habits that are encouraged by the tools we use. Don’t get defensive just yet, and read on. If you disagree, I welcome your comments and will do my best to keep up.&lt;/p&gt;

&lt;h2 id=&quot;constant-vigilance&quot;&gt;Constant Vigilance&lt;/h2&gt;

&lt;h2 id=&quot;classes-or-structs-in-c&quot;&gt;Classes or Structs in C#&lt;/h2&gt;

&lt;p&gt;Many of the tools we use, such as ORMs, require us to map to POCOs (Plain Old CLR Objects). WCF encourages POCOs for DataContracts for DTOs and SOAP Objects. This is all fine as they suit the needs of their intended purposes. There’s absolutely nothing wrong with it at all. The problem is us. The more these tools are used the more the format becomes old hat. We get used to doing things this way and never question mimicking it in our own systems, even when it’s not needed. Let’s look at the basic differences between the two.&lt;/p&gt;

&lt;h3 id=&quot;classes&quot;&gt;Classes&lt;/h3&gt;

&lt;p&gt;Classes are &lt;em&gt;generally&lt;/em&gt; stored on the heap and are cleaned up when the garbage collector no longer detects any references and deems it safe to destroy. Classes are also &lt;em&gt;generally&lt;/em&gt; passed by reference. In terms of C++, you’re dealing with pointers. Albeit pointers that are managed and cleaned up for you. Keep in mind this is an overly simplistic view of classes and the same over simplicity holds true for the Structs section below. For a very in-depth analysis of stack vs heap, read &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2009/04/27/the-stack-is-an-implementation-detail.aspx&quot;&gt;this article&lt;/a&gt; by Eric Lippert.&lt;/p&gt;

&lt;p&gt;Classes excel at a few things. They are good at/for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encapsulating Data&lt;/li&gt;
  &lt;li&gt;Hiding Data&lt;/li&gt;
  &lt;li&gt;Inheritance&lt;/li&gt;
  &lt;li&gt;Polymorphism&lt;/li&gt;
  &lt;li&gt;Composition&lt;/li&gt;
  &lt;li&gt;Abstraction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep that in mind when we look at the next section.&lt;/p&gt;

&lt;h3 id=&quot;structs&quot;&gt;Structs&lt;/h3&gt;

&lt;p&gt;Structs are &lt;em&gt;generally&lt;/em&gt; stored on the stack. This alone gives them an advantage over Classes. The stack is accessed quicker than the heap. Mind you, this is a micro-optimization and you’re at the mercy of the JITer you’re using. This also means that they are generally disposed of upon loss of scope, meaning you don’t have to wait for garbage collection to run.&lt;/p&gt;

&lt;p&gt;Structs are also good at a number of things, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data Encapsulation&lt;/li&gt;
  &lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;so-which-should-you-use&quot;&gt;So which should you use?&lt;/h3&gt;

&lt;p&gt;The answer, as always, is that it depends. Take a look at the lists above. Are you trying to hide implementation details? Use a Class. Are you taking advantage of abstraction, composition, or inheritance? Use a Class. Otherwise, you could use a Struct. I would even argue when you’re using abstraction, if you’re not inverting control, do you really need the abstract? True, you should strive to eliminate duplicate code, but sometimes it’s worth a little exploration to see if one performs better than the other. Remember, it’s a fine balancing act between a writing clean code and writing software that users &lt;strong&gt;&lt;em&gt;want&lt;/em&gt;&lt;/strong&gt; to use. If you’re going to go against the grain though, make sure you comment as to &lt;em&gt;why&lt;/em&gt; you are doing so.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Let’s say that you need to handle some events that look like this.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClassCreatedEvent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyClassCreatedEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s nothing wrong with this, but couldn’t it be as simple as:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClassCreatedEvent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyClassCreatedEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There really isn’t much difference between the two, but there’s no reason at this point to make it a Class. I say ‘at this point’ because you may need to change it down the road. &lt;strong&gt;That’s okay.&lt;/strong&gt; Software changes, it’s inevitable. This is where YAGNI comes into play. If you don’t need it &lt;em&gt;right now&lt;/em&gt;, then don’t waste effort on building it right now. This again is a balancing act, but the point is to not do more than you need to, because what you think you need may change tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="YAGNI" /><category term="C#" /><summary type="html">I’m going to have a recurring theme on the blog from time to time. I’ll probably have several, but this is the first. The theme here is constant vigilance. The same advice that Mad-Eye Moody gives to Harry Potter in the books. The constant vigilance theme will address poor coding habits that are encouraged by the tools we use. Don’t get defensive just yet, and read on. If you disagree, I welcome your comments and will do my best to keep up. Constant Vigilance Classes or Structs in C# Many of the tools we use, such as ORMs, require us to map to POCOs (Plain Old CLR Objects). WCF encourages POCOs for DataContracts for DTOs and SOAP Objects. This is all fine as they suit the needs of their intended purposes. There’s absolutely nothing wrong with it at all. The problem is us. The more these tools are used the more the format becomes old hat. We get used to doing things this way and never question mimicking it in our own systems, even when it’s not needed. Let’s look at the basic differences between the two. Classes Classes are generally stored on the heap and are cleaned up when the garbage collector no longer detects any references and deems it safe to destroy. Classes are also generally passed by reference. In terms of C++, you’re dealing with pointers. Albeit pointers that are managed and cleaned up for you. Keep in mind this is an overly simplistic view of classes and the same over simplicity holds true for the Structs section below. For a very in-depth analysis of stack vs heap, read this article by Eric Lippert. Classes excel at a few things. They are good at/for: Encapsulating Data Hiding Data Inheritance Polymorphism Composition Abstraction Keep that in mind when we look at the next section. Structs Structs are generally stored on the stack. This alone gives them an advantage over Classes. The stack is accessed quicker than the heap. Mind you, this is a micro-optimization and you’re at the mercy of the JITer you’re using. This also means that they are generally disposed of upon loss of scope, meaning you don’t have to wait for garbage collection to run. Structs are also good at a number of things, like: Data Encapsulation Polymorphism So which should you use? The answer, as always, is that it depends. Take a look at the lists above. Are you trying to hide implementation details? Use a Class. Are you taking advantage of abstraction, composition, or inheritance? Use a Class. Otherwise, you could use a Struct. I would even argue when you’re using abstraction, if you’re not inverting control, do you really need the abstract? True, you should strive to eliminate duplicate code, but sometimes it’s worth a little exploration to see if one performs better than the other. Remember, it’s a fine balancing act between a writing clean code and writing software that users want to use. If you’re going to go against the grain though, make sure you comment as to why you are doing so. Examples Let’s say that you need to handle some events that look like this. public class MyClassCreatedEvent { public int Id { get; set; } public DateTime Stamp { get; set; } public MyClassCreatedEvent(int id, DateTime stamp) { Id = id; Stamp = stamp; } } There’s nothing wrong with this, but couldn’t it be as simple as: public struct MyClassCreatedEvent { public int Id; public DateTime Stamp; public MyClassCreatedEvent(int id, DateTime stamp) { Id = id; Stamp = stamp; } } There really isn’t much difference between the two, but there’s no reason at this point to make it a Class. I say ‘at this point’ because you may need to change it down the road. That’s okay. Software changes, it’s inevitable. This is where YAGNI comes into play. If you don’t need it right now, then don’t waste effort on building it right now. This again is a balancing act, but the point is to not do more than you need to, because what you think you need may change tomorrow.</summary></entry><entry><title type="html">Using GitHub Pages with Ghost and Buster on Windows (part 2)</title><link href="http://localhost:4000/2014/02/24/using-github-pages-with-ghost-and-buster-on-windows-part-2.html" rel="alternate" type="text/html" title="Using GitHub Pages with Ghost and Buster on Windows (part 2)" /><published>2014-02-24T11:08:59-07:00</published><updated>2014-02-24T11:08:59-07:00</updated><id>http://localhost:4000/2014/02/24/using-github-pages-with-ghost-and-buster-on-windows-part-2</id><content type="html" xml:base="http://localhost:4000/2014/02/24/using-github-pages-with-ghost-and-buster-on-windows-part-2.html">&lt;h1 id=&quot;hacking-buster-and-deploying&quot;&gt;Hacking Buster and Deploying&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Series:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/02/07/using-github-pages-with-ghost-and-buster-on-windows-part-1&quot;&gt;Part 1: Taking Inventory and Setting Up&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Part 2: Hacking Buster and Deploying&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;In the first part of the series we talked about setting up your Windows machine with Node.js, Python, MinGW, Git Bash, and Pip. If you haven’t done so already, please use the link to part one above.&lt;/p&gt;

&lt;h2 id=&quot;getting-ghost&quot;&gt;Getting Ghost&lt;/h2&gt;

&lt;p&gt;Let’s get start on getting you set up with the Ghost blogging engine. You should start by heading over to the &lt;a href=&quot;https://github.com/tryghost/Ghost&quot;&gt;Ghost GitHub Repository&lt;/a&gt;. The README has a lot of great info in it and goes over various ways to install. We’ll cover cloning the repo so you can run it locally. Let’s start by firing up your Git Bash and entering the following:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This assumes that you want to run everything in your users directory, if not change to a path where you want to install ghost. Now we’ll clone ghost.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/TryGhost/Ghost.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ghost
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--production&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should have Ghost running on the default url &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:2368&lt;/code&gt;. You can start to create an admin profile and access the admin settings any time at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:2368/ghost&lt;/code&gt;. Now if you want to set a specific URL for your GitHub Page let’s set that repo up on GitHub first. Go ahead and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+C&lt;/code&gt; in your Git Bash.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-your-github-repo-for-github-pages&quot;&gt;Setting up your GitHub repo for GitHub pages&lt;/h2&gt;

&lt;p&gt;The best info, as always, can be found from GitHub themselves at &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. As a quick abbreviated version, we’ll set up a new repo for this exercise. Go to your GitHub account and create a new repo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hygtqg.bn1304.livefilestore.com/y4mcUMRycRr5WNn0tbrst8Rdt_2GUU8fqrjrJNiaKvD6nj2dP-RG_swQWgLXhfd3qhukbeJv3gMLSOw3smH9qkEn-z4coHDUgCcm5QzrWWD7NxeP2BNXVbqe--oArlyyyyVXCK89dC3zJx3Au5PCSMcluaZt5siK5-sGN8-8idRQL-b3PH73CczxFTKHapb60C15TPYkMaDKGg0JewHPEQxvg&quot; alt=&quot;github profile&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Name the new repo whatever makes sense to you. Make sure to select Initialize with README. It’s not necessary but it makes the next step that much quicker. Now in your new repo, create a new branch called &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;. It’s very important that it be exact, this is what GitHub Pages works on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://h4gtqg.bn1304.livefilestore.com/y4mQHC-kajvDNrte1s2EhB9pbUHSniXOBnFbwz9Ei3XvhYGoUrNeTVpIof4Zos2YT19q_IlhAlxgnlFz-6EcYpGjeIsmfL_E6lFh19AlALsDr_PoY6FnzqxIOy3qwRA0TBKMoPiLgru5MQjRbHjGD2YLFWGW2BElPP1ONxRdFU8fOnzpKlADAYoeBl0tHybwU7dhIIWhCaarcK-yNP4PJgLQQ&quot; alt=&quot;github branches&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you’re finished it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://iigtqg.bn1304.livefilestore.com/y4m8BoYzWsO0kov9s3bKFzEmzODdG-FWcxI8MHpGOAHS2HSmcF0ZwGu78utGH5PYi5p8Q5TCNoo9bZ68WqYhcsHJYyTkO3gAIDIuxMuj7QtuEawniB6CUHijWPv3rrKibMWfnLCpEQytQyMAPBC99703AAQTBMOzj-QzlJ1LwwCmIO0yipsh11jefKCgdr-hvGsmdGmVf938NywSUI8m9GBuA&quot; alt=&quot;github gh-pages branch&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-up-your-new-site-in-git-locally&quot;&gt;Setting up your new site in git locally&lt;/h3&gt;

&lt;p&gt;Now that you have the repo set up, let’s pull it down. There should be a link in the bottom right of your repo page on GitHub that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gygtqg.bn1304.livefilestore.com/y4mGGqx9rvQZ7dtZKVQSrx4d2BSV_1jyRKEiDdvalHiRQMpZ9C-jjIZz6lv_0vZS0AsatD0-GiytGo5jif0lqbV6P1zu-33GPDAuILzlJkqToMOb2kkUB_w8NyKQxUZwMhyMUQ-G0RBPBD8QnRi00H3J4tgl5Mt7JmaxizUlfrva5eR0aRVBczxjOqNm825kI4LFA1nCiqdVSPVcaiHb465PQ&quot; alt=&quot;github clone&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the “copy to clipboard button to grab the clone url”
Fire up your Git Bash again and use the following commands:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/leftofnull/mywebsite.git &amp;lt;this will be the url you copied, not this exact one&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now have your repo set up!&lt;/p&gt;

&lt;h2 id=&quot;modifying-the-default-url-in-ghost&quot;&gt;Modifying the default URL in Ghost&lt;/h2&gt;

&lt;p&gt;Make sure Ghost is not running. Navigate in the file explorer to where you cloned Ghost and look for &lt;code class=&quot;highlighter-rouge&quot;&gt;config.js&lt;/code&gt;. Open it any any text editor and find the &lt;code class=&quot;highlighter-rouge&quot;&gt;url:&lt;/code&gt; property and change it to http://&lt;em&gt;username&lt;/em&gt;.github.io/&lt;em&gt;repository&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;hacking-buster&quot;&gt;Hacking Buster&lt;/h2&gt;

&lt;p&gt;Unfortunately for Windows users Buster was not designed with Windows in mind. So we’ll have to do a little hacking. I have a forked version of the Buster repo that can be cloned here:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/leftofnull/buster.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;buster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The original repo can be found at https://github.com/axitkhurana/buster. The main differences are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;buster/buster.py&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Starting at line 39, original:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'generate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wget &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--recursive &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--convert-links &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--page-requisites &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--no-parent &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--directory-prefix {1} &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--no-host-directories &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;{0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--domain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the modified version:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'generate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wget &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--recursive &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--convert-links &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--page-requisites &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--no-parent &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--directory-prefix {1} &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--no-host-directories &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;--restrict-file-names=unix &quot;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;{0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--domain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve removed the &lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt; characters as they cause Windows to escape the string, in *nix based systems it allows you to use a carriage return and keep typing the same command. We’ve also added the &lt;code class=&quot;highlighter-rouge&quot;&gt;--restrict-file-names=unix&lt;/code&gt; flag which will prevent some of the default escaping in html files that Windows performs with &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;. This also negates the &lt;code class=&quot;highlighter-rouge&quot;&gt;--convert-links&lt;/code&gt; flag unfortunately, we’ll fix that in a minute.&lt;/p&gt;

&lt;p&gt;Next on line 50, original:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;file_regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'.*?(\?.*)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll need to modify and add another regex:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;file_regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;.*?(@.*)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;html_regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;.*?(\.html)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to modify the file_regex for Windows and we’re going to create another to identify html files.&lt;/p&gt;

&lt;p&gt;At line 52 in the original:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'\?.*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newname&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll tweak to:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html_regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--domain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hurl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--domain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'@.*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newname&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s our big cheat. We’re going through all html files and swapping out any instances of the root url, in this case http://127.0.0.1:2368 or where ever you’re running it locally and replacing it with a relative url path. &lt;strong&gt;Hacking Complete!&lt;/strong&gt; As you can imagine, this has some built in performance degradation, but it works!&lt;/p&gt;

&lt;h2 id=&quot;installing-your-modified-buster&quot;&gt;Installing your modified Buster&lt;/h2&gt;

&lt;p&gt;Open your Git Bash, if you haven’t already, and use the following commands:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;buster
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python setup.py install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;buster &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
0.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-buster&quot;&gt;Setting up Buster&lt;/h2&gt;

&lt;p&gt;Run the setup and when it asks for your GitHub url, use the one you will be using for your gh-pages that you set up earlier. If you need to, grab the clone url again before you start.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;buster setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And follow the prompts.&lt;/p&gt;

&lt;p&gt;Now you’ll need to open another instance of Git Bash and run:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ghost
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you didn’t finish setting up the admin stuff before, you’ll need to set it up now. You should have the welcome post by default, we’ll leave that for now so we can test it out. Once that’s finished, leave Ghost running and switch back to the Git Bash where you ran the setup for Buster from.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;buster generate &lt;span class=&quot;nt&quot;&gt;--domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;%hurl% &lt;span class=&quot;nt&quot;&gt;--dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/c/users/username/mywebsite
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;buster deploy &lt;span class=&quot;nt&quot;&gt;--dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/c/users/username/mywebsite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate the static content and deploy your site to the gh-pages branch in GitHub. You can try navigating there by putting the http://&lt;em&gt;username&lt;/em&gt;.github.io/&lt;em&gt;repository&lt;/em&gt; in the location bar of any browser window.&lt;/p&gt;

&lt;p&gt;That’s it! You now have a blog on GitHub Pages with Ghost and Buster. Any time you want to add new blogs or modify it, just run ghost locally, make the changes, and run the buster generate and deploy commands. Let me know in the comments if you run into any issues. Happy Coding!&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="buster" /><category term="gh-pages" /><category term="windows" /><category term="ghost" /><category term="node.js" /><category term="github pages" /><summary type="html">Hacking Buster and Deploying Series: Part 1: Taking Inventory and Setting Up Part 2: Hacking Buster and Deploying Recap In the first part of the series we talked about setting up your Windows machine with Node.js, Python, MinGW, Git Bash, and Pip. If you haven’t done so already, please use the link to part one above. Getting Ghost Let’s get start on getting you set up with the Ghost blogging engine. You should start by heading over to the Ghost GitHub Repository. The README has a lot of great info in it and goes over various ways to install. We’ll cover cloning the repo so you can run it locally. Let’s start by firing up your Git Bash and entering the following: $ cd ~ This assumes that you want to run everything in your users directory, if not change to a path where you want to install ghost. Now we’ll clone ghost. $ git clone https://github.com/TryGhost/Ghost.git $ cd ghost $ npm install --production $ npm start You should have Ghost running on the default url http://127.0.0.1:2368. You can start to create an admin profile and access the admin settings any time at http://127.0.0.1:2368/ghost. Now if you want to set a specific URL for your GitHub Page let’s set that repo up on GitHub first. Go ahead and hit Ctrl+C in your Git Bash. Setting up your GitHub repo for GitHub pages The best info, as always, can be found from GitHub themselves at GitHub Pages. As a quick abbreviated version, we’ll set up a new repo for this exercise. Go to your GitHub account and create a new repo. Name the new repo whatever makes sense to you. Make sure to select Initialize with README. It’s not necessary but it makes the next step that much quicker. Now in your new repo, create a new branch called gh-pages. It’s very important that it be exact, this is what GitHub Pages works on. When you’re finished it should look like this: Setting up your new site in git locally Now that you have the repo set up, let’s pull it down. There should be a link in the bottom right of your repo page on GitHub that looks like this: Click the “copy to clipboard button to grab the clone url” Fire up your Git Bash again and use the following commands: $ cd ~ $ git clone https://github.com/leftofnull/mywebsite.git &amp;lt;this will be the url you copied, not this exact one&amp;gt; $ git checkout -b gh-pages You should now have your repo set up! Modifying the default URL in Ghost Make sure Ghost is not running. Navigate in the file explorer to where you cloned Ghost and look for config.js. Open it any any text editor and find the url: property and change it to http://username.github.io/repository. Hacking Buster Unfortunately for Windows users Buster was not designed with Windows in mind. So we’ll have to do a little hacking. I have a forked version of the Buster repo that can be cloned here: $ cd ~ $ git clone https://github.com/leftofnull/buster.git $ cd buster The original repo can be found at https://github.com/axitkhurana/buster. The main differences are in the buster/buster.py file. Starting at line 39, original: if arguments['generate']: command = (&quot;wget \\&quot; &quot;--recursive \\&quot; &quot;--convert-links \\&quot; &quot;--page-requisites \\&quot; &quot;--no-parent \\&quot; &quot;--directory-prefix {1} \\&quot; &quot;--no-host-directories \\&quot; &quot;{0}&quot;).format(arguments['--domain'], static_path) And the modified version: if arguments['generate']: command = (&quot;wget &quot; &quot;--recursive &quot; &quot;--convert-links &quot; &quot;--page-requisites &quot; &quot;--no-parent &quot; &quot;--directory-prefix {1} &quot; &quot;--no-host-directories &quot; &quot;--restrict-file-names=unix &quot; &quot;{0}&quot;).format(arguments['--domain'], static_path) We’ve removed the \\ characters as they cause Windows to escape the string, in *nix based systems it allows you to use a carriage return and keep typing the same command. We’ve also added the --restrict-file-names=unix flag which will prevent some of the default escaping in html files that Windows performs with wget. This also negates the --convert-links flag unfortunately, we’ll fix that in a minute. Next on line 50, original: file_regex = re.compile(r'.*?(\?.*)') We’ll need to modify and add another regex: file_regex = re.compile(r&quot;.*?(@.*)&quot;) html_regex = re.compile(r&quot;.*?(\.html)&quot;) We have to modify the file_regex for Windows and we’re going to create another to identify html files. At line 52 in the original: for filename in filenames: if file_regex.match(filename): newname = re.sub(r'\?.*', '', filename) print &quot;Rename&quot;, filename, &quot;=&amp;gt;&quot;, newname os.rename(os.path.join(root, filename), os.path.join(root, newname)) We’ll tweak to: for filename in filenames: if html_regex.match(filename): path = (&quot;{0}&quot;).format(os.path.join(root, filename).replace(&quot;\\&quot;, &quot;/&quot;)) with open(path, &quot;r+&quot;) as f: file_contents = f.read() file_contents = file_contents.replace(arguments['--domain'], &quot;&quot;) file_contents = file_contents.replace(&quot;%hurl&quot;, arguments['--domain']) f.seek(0) f.write(file_contents) f.close() if file_regex.match(filename): newname = re.sub(r'@.*', '', filename) print &quot;Rename&quot;, filename, &quot;=&amp;gt;&quot;, newname os.rename(os.path.join(root, filename), os.path.join(root, newname)) Here’s our big cheat. We’re going through all html files and swapping out any instances of the root url, in this case http://127.0.0.1:2368 or where ever you’re running it locally and replacing it with a relative url path. Hacking Complete! As you can imagine, this has some built in performance degradation, but it works! Installing your modified Buster Open your Git Bash, if you haven’t already, and use the following commands: $ cd ~ $ cd buster $ python setup.py install $ buster --version 0.1.2 That’s it! Setting up Buster Run the setup and when it asks for your GitHub url, use the one you will be using for your gh-pages that you set up earlier. If you need to, grab the clone url again before you start. $ buster setup And follow the prompts. Now you’ll need to open another instance of Git Bash and run: $ cd ~ $ cd ghost $ npm start If you didn’t finish setting up the admin stuff before, you’ll need to set it up now. You should have the welcome post by default, we’ll leave that for now so we can test it out. Once that’s finished, leave Ghost running and switch back to the Git Bash where you ran the setup for Buster from. $ buster generate --domain=%hurl% --dir=/c/users/username/mywebsite $ buster deploy --dir=/c/users/username/mywebsite This will generate the static content and deploy your site to the gh-pages branch in GitHub. You can try navigating there by putting the http://username.github.io/repository in the location bar of any browser window. That’s it! You now have a blog on GitHub Pages with Ghost and Buster. Any time you want to add new blogs or modify it, just run ghost locally, make the changes, and run the buster generate and deploy commands. Let me know in the comments if you run into any issues. Happy Coding!</summary></entry><entry><title type="html">Using GitHub Pages with Ghost and Buster on Windows (part 1)</title><link href="http://localhost:4000/2014/02/07/using-github-pages-with-ghost-and-buster-on-windows-part-1.html" rel="alternate" type="text/html" title="Using GitHub Pages with Ghost and Buster on Windows (part 1)" /><published>2014-02-07T11:08:59-07:00</published><updated>2014-02-07T11:08:59-07:00</updated><id>http://localhost:4000/2014/02/07/using-github-pages-with-ghost-and-buster-on-windows-part-1</id><content type="html" xml:base="http://localhost:4000/2014/02/07/using-github-pages-with-ghost-and-buster-on-windows-part-1.html">&lt;h1 id=&quot;taking-inventory-and-setting-up&quot;&gt;Taking Inventory and Setting Up&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;First and foremost, if you are using Linux or OSX, follow this guide &lt;a href=&quot;http://genescissors.github.io/deploying-ghost-blog-to-gh-pages/&quot;&gt;here&lt;/a&gt; and save yourself a &lt;strong&gt;lot&lt;/strong&gt; of time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Series:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: Taking Inventory and Setting Up&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/02/24/using-github-pages-with-ghost-and-buster-on-windows-part-2&quot;&gt;Part 2: Hacking Buster and Deploying&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-software&quot;&gt;List of software&lt;/h2&gt;

&lt;p&gt;I’m assuming you have a GitHub account already, if not go &lt;a href=&quot;http://github.com&quot;&gt;create one&lt;/a&gt; now. I’ll wait.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/download/&quot;&gt;node.js windows installer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://msysgit.github.io/&quot;&gt;Git Bash windows installer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/latest/download?source=files&quot;&gt;MinGW&lt;/a&gt; (or Cygwin, I use MinGW for this post)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.python.org/download/&quot;&gt;Python 2.7 windows installer&lt;/a&gt; &lt;strong&gt;(any version &amp;gt;= 3 won’t work)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&quot;&gt;PIP for Python&lt;/a&gt; (right click and file&amp;gt;save as “get-pip.py”)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installing-nodejs&quot;&gt;Installing node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://nodejs.org/download/&quot;&gt;node.js download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Installing node.js on Windows is really straight forward and very easy thanks to Joyent’s installer.  It truly is just a next, next, finish install. The one thing to watch out for is to make sure that you can access node and npm after the install. You may have to reboot for it to take full effect.&lt;/p&gt;

&lt;p&gt;Let’s make sure node is installed properly. Open a console and type in:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it’s installed properly, you should get a response like this:
&lt;code class=&quot;highlighter-rouge&quot;&gt;v0.10.25&lt;/code&gt; keep in mind your version may be different from when this article was written.&lt;/p&gt;

&lt;p&gt;Now let’s make sure NPM is installed correctly:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expect similar output as the first statement, but the versions won’t match and they aren’t meant to either. If you’re having any trouble, try rebooting and repeating these steps first.&lt;/p&gt;

&lt;h2 id=&quot;installing-git-bash&quot;&gt;Installing Git Bash&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://msysgit.github.io/&quot;&gt;Git Bash download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The installation of the Git Bash in Windows is done equally as well. It’s another next, next, finish. There are some extra options that display during the install, but as long as you stick with all the defaults, i.e. don’t change anything, you’ll be fine.&lt;/p&gt;

&lt;h2 id=&quot;installing-mingw&quot;&gt;Installing MinGW&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/latest/download?source=files&quot;&gt;MinGW download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s where we start to get a little more difficult. Follow the prompts and leave the default settings. Feel free to change the install directory, in fact it’s very important that you keep track of it. For this reason, I installed it to &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\dev\MinGW&lt;/code&gt;. This will come into play as we install Python and when we modify our &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. Once you have it installed, you’ll want to set up the packages that we’ll be using. Let’s launch the MinGW Installation Manager.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Basic Setup&lt;/strong&gt; from the menu on the left. We just need to make sure we have two packages here, &lt;code class=&quot;highlighter-rouge&quot;&gt;mingw32-base&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;msys-base&lt;/code&gt;. It should look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hhmoww.bn1304.livefilestore.com/y4mDpImDFvFe97dQQE4Gd8kd8itSTxXFpJvpVe5i-haGucCH7z2OKu4OHqaGYhLkyOzXRgTO3VsP4ldME5Q3RVedbwBxRs_XqvXGD6rddJR3gfKXg-soRH8iIrZaWC8ci8GJK5-m4elsMHwe6QMetYtu7qieA63LYcwRR9D1oKboZ_tbr2iW_p1d9ElQ1cYtO06nNCL5d_R5T9TStCWcCmi7A&quot; alt=&quot;ming settings 1&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s get one other package we’ll need. Click on the &lt;strong&gt;All Packages&lt;/strong&gt; and scroll down to find msys-wget and set that package to install. Lastly click the &lt;em&gt;Installation&lt;/em&gt; menu at the top and then &lt;em&gt;Apply Changes&lt;/em&gt;. When you’re done it should look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://hxmoww.bn1304.livefilestore.com/y4mdPw4y1s7-vq_PQijvWloWjvnbPLqkJvBUBU170Cs7v3M7cNSJvPYjlpABL0-kL19X_gC2udaojpx2eSGAc63EMFhJj_TEKg5q7mN6Iymsy5sn-A0-0BIblgN-UQpzuDAuCAauNXFd5L-N5itUAjCWEhFspILiDtnCE-LPs-PfUw_U4xfcdNnN9iGEm67Sq3L9n0V3OMght3iNsqzLUGhyA&quot; alt=&quot;ming settings 2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a final touch we’re going to have to modify our &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;h2 id=&quot;modifying-your-path&quot;&gt;Modifying your &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Windows Key] + [Pause/Break Key]&lt;/code&gt; to launch your System Properties dialog. From here you’ll want to click on the &lt;em&gt;Advanced System settings&lt;/em&gt;. As soon as that dialog launches, click on the &lt;em&gt;Environment Variables…&lt;/em&gt; button at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ibmoww.bn1304.livefilestore.com/y4ma4qsHN-zGPd3Uig56HQF9nmEyFwUyKBElbj0Zx7a7nvOycO0FUz788Vrse1FRgVLsATLBCXUVBJ1J9YHBVwpGdtjL-kkB22B4uzUUEsTb-8AIhjXrBRh4Xi4GuQ15sgQIiB2-nykR25NU9yPOaixepuiNBr_C3LWRhJNWu0AHSJ-PMKnTx3IhtqWVW4NGnSUamGNk3nHeprW1lYtwa910g&quot; alt=&quot;path settings&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable and click &lt;em&gt;Edit&lt;/em&gt;. All the values are semi-colon delimited. We’ll need to add two new ones. Move to the end of the line of values and now make sure you add to following so the end looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;C:\dev\MINGW\msys\1.0\Bin;C:\dev\MINGW\Bin;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will add all the msys tools and the mingw tools to your path so you can access them from any command prompt in Windows.&lt;/p&gt;

&lt;h2 id=&quot;installing-python&quot;&gt;Installing Python&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.python.org/download/&quot;&gt;Python 2.7 download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you grab the 2.7.6 version or earlier. 3.0 or higher will not work right now. The author of buster is using the &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; statement throughout the package and in version 3 they changed it to a method call &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here I changed the installation directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\dev\Python27&lt;/code&gt; to keep all the libraries in the same root folder.&lt;/p&gt;

&lt;p&gt;Once complete we’ll need to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; again. Make sure you add the following to the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; values:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;C:\dev\Python27;C:\dev\Python27\scripts;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will add Python and any scripts you install to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; so they can be called from any command prompt in Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s test it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Launch your Git Bash, or preferred command prompt. Type in the following command and if you get a version number back, you’re good!&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;installing-pip&quot;&gt;Installing PIP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&quot;&gt;PIP download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don’t get scared when you click on that link, it’s supposed to look like that. Just right click anywhere on that page and select &lt;em&gt;Save As…&lt;/em&gt;. Make sure to name the file &lt;code class=&quot;highlighter-rouge&quot;&gt;get-pip.py&lt;/code&gt;. I would suggest saving it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\dev&lt;/code&gt; folder to make it easy.&lt;/p&gt;

&lt;p&gt;Once that’s done, let’s launch Git Bash and type in the following commands:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /c/dev
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll see it install PIP. Now to test it out. If you get a version number, you’re good!&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setup-complete&quot;&gt;Setup Complete!&lt;/h2&gt;

&lt;p&gt;You’re now ready to move on to the next part which will be getting Ghost and buster running.&lt;/p&gt;</content><author><name></name></author><category term="ghost" /><category term="windows" /><category term="github pages" /><category term="buster" /><category term="gh-pages" /><category term="blog" /><category term="node.js" /><summary type="html">Taking Inventory and Setting Up First and foremost, if you are using Linux or OSX, follow this guide here and save yourself a lot of time. Series: Part 1: Taking Inventory and Setting Up Part 2: Hacking Buster and Deploying List of software I’m assuming you have a GitHub account already, if not go create one now. I’ll wait. node.js windows installer Git Bash windows installer MinGW (or Cygwin, I use MinGW for this post) Python 2.7 windows installer (any version &amp;gt;= 3 won’t work) PIP for Python (right click and file&amp;gt;save as “get-pip.py”) Installing node.js node.js download Installing node.js on Windows is really straight forward and very easy thanks to Joyent’s installer. It truly is just a next, next, finish install. The one thing to watch out for is to make sure that you can access node and npm after the install. You may have to reboot for it to take full effect. Let’s make sure node is installed properly. Open a console and type in: node --version If it’s installed properly, you should get a response like this: v0.10.25 keep in mind your version may be different from when this article was written. Now let’s make sure NPM is installed correctly: npm --version Expect similar output as the first statement, but the versions won’t match and they aren’t meant to either. If you’re having any trouble, try rebooting and repeating these steps first. Installing Git Bash Git Bash download The installation of the Git Bash in Windows is done equally as well. It’s another next, next, finish. There are some extra options that display during the install, but as long as you stick with all the defaults, i.e. don’t change anything, you’ll be fine. Installing MinGW MinGW download Here’s where we start to get a little more difficult. Follow the prompts and leave the default settings. Feel free to change the install directory, in fact it’s very important that you keep track of it. For this reason, I installed it to C:\dev\MinGW. This will come into play as we install Python and when we modify our PATH. Once you have it installed, you’ll want to set up the packages that we’ll be using. Let’s launch the MinGW Installation Manager. Select the Basic Setup from the menu on the left. We just need to make sure we have two packages here, mingw32-base and msys-base. It should look like this. Now let’s get one other package we’ll need. Click on the All Packages and scroll down to find msys-wget and set that package to install. Lastly click the Installation menu at the top and then Apply Changes. When you’re done it should look like this. As a final touch we’re going to have to modify our PATH environment variable. Modifying your PATH Use the [Windows Key] + [Pause/Break Key] to launch your System Properties dialog. From here you’ll want to click on the Advanced System settings. As soon as that dialog launches, click on the Environment Variables… button at the bottom. Select the PATH variable and click Edit. All the values are semi-colon delimited. We’ll need to add two new ones. Move to the end of the line of values and now make sure you add to following so the end looks like this: ;C:\dev\MINGW\msys\1.0\Bin;C:\dev\MINGW\Bin; This will add all the msys tools and the mingw tools to your path so you can access them from any command prompt in Windows. Installing Python Python 2.7 download Make sure you grab the 2.7.6 version or earlier. 3.0 or higher will not work right now. The author of buster is using the print statement throughout the package and in version 3 they changed it to a method call print(). Here I changed the installation directory to C:\dev\Python27 to keep all the libraries in the same root folder. Once complete we’ll need to modify the PATH again. Make sure you add the following to the end of the PATH values: ;C:\dev\Python27;C:\dev\Python27\scripts; This will add Python and any scripts you install to the PATH so they can be called from any command prompt in Windows. Let’s test it! Launch your Git Bash, or preferred command prompt. Type in the following command and if you get a version number back, you’re good! python --version Installing PIP PIP download Don’t get scared when you click on that link, it’s supposed to look like that. Just right click anywhere on that page and select Save As…. Make sure to name the file get-pip.py. I would suggest saving it to the C:\dev folder to make it easy. Once that’s done, let’s launch Git Bash and type in the following commands: $ cd /c/dev $ python get-pip.py You’ll see it install PIP. Now to test it out. If you get a version number, you’re good! pip --version Setup Complete! You’re now ready to move on to the next part which will be getting Ghost and buster running.</summary></entry><entry><title type="html">Choose Your Tools Wisely</title><link href="http://localhost:4000/2014/02/04/choose-your-tools-wisely.html" rel="alternate" type="text/html" title="Choose Your Tools Wisely" /><published>2014-02-04T11:08:59-07:00</published><updated>2014-02-04T11:08:59-07:00</updated><id>http://localhost:4000/2014/02/04/choose-your-tools-wisely</id><content type="html" xml:base="http://localhost:4000/2014/02/04/choose-your-tools-wisely.html">&lt;p&gt;&lt;img src=&quot;https://ucruhw.bn1304.livefilestore.com/y4mAmf8-ciaySzHWFU9conuLSKgzOEXd0rdaGWLGU3DJWMvb3nO-tkq11VM6IqYdvxid6IQdEqzyaW8u2npEpkLhrZEaSN2ulfyC33mIS5H5CNXWXil25OLaAHJh1bnDuaqs6d9BfaYfk8Zo9xnYs48jHdLH63IVcklv-7FcNovAz2IvPOtcVjD7mL9ZVplmN7bQh35B13nM9c4d7fIgLJO0g&quot; alt=&quot;choose your weapon&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s face it programming a computer is a little more involved than programming a VCR (if you’re old enough to remember those, &lt;a href=&quot;http://en.wikipedia.org/wiki/Vcr&quot;&gt;Wikipedia&lt;/a&gt; for those that don’t). Those of us that have been doing it for a while can make it look easy but part of that starts with our tools. Let’s look at the developers second most critical tool. An &lt;a href=&quot;http://en.wikipedia.org/wiki/Integrated_development_environment&quot;&gt;IDE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This topic came up where I currently work, &lt;a href=&quot;http://www.neudesic.com/Pages/default.aspx&quot;&gt;Neudesic&lt;/a&gt;, with some other developers. They were soliciting advice on what IDEs we preferred for what languages. Understandably there was a lot of feedback and a lot of discussion on what was best. I’m only going to cover some for .NET and JavaScript because this post would never end if I didn’t cut it off somewhere.&lt;/p&gt;

&lt;h3 id=&quot;what-is-an-ide&quot;&gt;What is an IDE&lt;/h3&gt;

&lt;p&gt;IDE stands for integrated development environment. It’s a software tool that helps you write code. Some key features in this regard are intelligent code completion, build engines, source control integration, debuggers, and project file management. Some IDEs have all of these features, while others have a mixture of them. Like I said , they are tools that help you write code. If your IDE isn’t helping you write code, you’ve chosen the wrong one.&lt;/p&gt;

&lt;h3 id=&quot;one-ide-to-rule-them-all&quot;&gt;One IDE to rule them all&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;What’s the best IDE? There isn’t one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may have to switch IDEs based on what language you are currently writing in. You may find that you don’t &lt;em&gt;have to&lt;/em&gt; but you may want to due to languages. Some IDEs are better or have more features for certain languages. Take, for instance, Visual Studio. There are extensions galore for web development that really make JavaScript a first-class citizen, yet when I developed in &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; I preferred Sublime Text. One thing to keep in mind when reading on is that I will focus more on the ones I’ve used most. Another thing to keep in mind is that an IDE is a matter of preference.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The key here is that you want to choose the IDE that suits &lt;strong&gt;&lt;em&gt;you&lt;/em&gt;&lt;/strong&gt;. Your collegues may have different preferences and may espout their chosen IDEs features, but if it doesn’t work for you then you may as well get a pipe and smack you keyboard and call it coding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;net-ides&quot;&gt;.NET IDEs&lt;/h2&gt;

&lt;h3 id=&quot;visual-studio&quot;&gt;Visual Studio&lt;/h3&gt;

&lt;p&gt;How can we not start here. It’s the main-stay of .NET IDEs and it’s what I use on a daily basis. Visual Studio comes in a variety of flavors, Express (free), Professional, Premium, and Ultimate.&lt;/p&gt;

&lt;p&gt;The main drawback of Express is that there isn’t just &lt;em&gt;one&lt;/em&gt; version. There are several that all depend on what you want to do. There’s one specifically for &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-web&quot;&gt;web&lt;/a&gt;, one for &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-desktop&quot;&gt;desktop&lt;/a&gt;, one for &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-8&quot;&gt;RT&lt;/a&gt; (interface formerly known as metro), one for &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-phone&quot;&gt;Phone&lt;/a&gt;, etc. They all have MSTest built in too so you can create unit tests. To be honest, for open source projects or single dev shops, you don’t really need much more. One &lt;strong&gt;major&lt;/strong&gt; drawback is that you can’t install extensions like you can for the Pro and higher versions, which means no ReSharper.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs#d-professional&quot;&gt;Professional&lt;/a&gt; is identical to the Express editions with the addition of extensions (yay &lt;a href=&quot;http://www.jetbrains.com/resharper/&quot;&gt;ReSharper&lt;/a&gt; support), and it’s &lt;em&gt;one&lt;/em&gt; version. Over the years the Professional version has become really watered down and, in my opinion, doesn’t cut the mustard for large projects anymore.&lt;/p&gt;

&lt;p&gt;Which brings us to &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs#d-premium&quot;&gt;Premium&lt;/a&gt;. All of the versions are buy-ups so to speak, so you get all the goodies of the lower-priced versions but with added features. The biggest thing that Premium gets you is the Team tools. From here you can solicit code reviews, view your tasks for the project/sprint, perform code reviews for others, etc. When I say solicit code reviews, I don’t just mean create a task, I mean full-featured reviews. You can create a task for someone and they can open that task and see all of the files you changed and do a side-by-side comparison of the changes. You even get to highlight and comment the changed code and send those comments back. When you get the comments you can click on them and it will jump you right to the line under discussion. Really cool feature and essential for larger teams.&lt;/p&gt;

&lt;p&gt;Last is &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs#d-ultimate&quot;&gt;Ultimate&lt;/a&gt;. Which has all of the features. The two big draws here are the Architecture tools and the Load and Performance test tools. In earlier versions of VS you could perform Load and Performance tests at the Premium SKU, but as of 2012 that has changed. If you’re on a larger team/project, I recommend that at least one person have one of these licenses.&lt;/p&gt;

&lt;h3 id=&quot;alternative-net-ides&quot;&gt;Alternative .NET IDEs&lt;/h3&gt;

&lt;p&gt;Alternatives are &lt;a href=&quot;http://www.icsharpcode.net/OpenSource/SD/&quot;&gt;SharpDevelop&lt;/a&gt;, which I haven’t used but I hear is a very nice alternative to VS. Another one is &lt;a href=&quot;http://monodevelop.com/&quot;&gt;MonoDevelop&lt;/a&gt;, which if you’re doing development in Mono instead of C#, you have a choice of VS or MD, but MD is really nice at it. If JetBrains were to create an IDE for .NET and package ReSharper into it, I have a feeling that would become dominant (&lt;em&gt;hint hint JetBrains :-)&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;javascript-ides&quot;&gt;JavaScript IDEs&lt;/h2&gt;

&lt;h3 id=&quot;webmatrix&quot;&gt;&lt;a href=&quot;http://www.microsoft.com/web/webmatrix/&quot;&gt;WebMatrix&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This is a really nice free offering from Microsoft. If you’re a .NET developer making a transition to Node.js or just don’t want to load Visual Studio, this is a really great stepping stone. It has default templates for .NET Web Projects and Node.js projects among many others. It will also automatically configure your IISExpress to run Node.js websites. You can even install a NPM extension that lets you grab packages right from the IDE.&lt;/p&gt;

&lt;h3 id=&quot;webstorm&quot;&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This one is by JetBrains and is a world class web IDE. It’s biggest draws are going to be the intellisense (code completion) and refactoring tools. It’s a really nice IDE and feels very comfortable to work in. You can &lt;strong&gt;try before you buy&lt;/strong&gt; and can pick up a personal license for $49 (USD).&lt;/p&gt;

&lt;h3 id=&quot;sublime-text&quot;&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This one is my personal favorite. It’s comparable to TextMate if you’re familiar with it. It can even use TextMate packages. It has word completion instead of code completion out of the box so you’ll have to be aware of that going in. You can enable &lt;a href=&quot;http://www.sublimetext.com/docs/3/vintage.html&quot;&gt;VIM-mode&lt;/a&gt; out of the box too (this may not be for everyone, but my beard demands it). The thing that really sells Sublime Text for me is the packages and a package called &lt;a href=&quot;https://sublime.wbond.net/installation&quot;&gt;Package Control&lt;/a&gt;. It makes installing packages a few keystrokes away. There is a rich community developing packages for Sublime Text and you could even create your own. Want JavaScript Snippets? It’s there. What Express.js Snippets? They’re there too. How about jsLint or jsHint? Yup. You can make it be as robust as all the other IDEs or as simple as notepad. It’s completely up to you. After using it for CoffeeScript, JavaScript, and as my primary Node.js IDE it makes Visual Studio feel like an 80-tool swiss army knife (nice, but unweildy). You can &lt;strong&gt;try before you buy&lt;/strong&gt; and can pick up a personal license for $70 (USD).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;No matter what IDE you choose, make sure you learn the ins and outs of it. There are things that an IDE can do to make your life so much easier when coding. Don’t ignore those things and make sure you fully explore. Happy Coding!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Tools" /><category term="Coding" /><category term="Development" /><category term="IDE" /><category term=".NET" /><category term="JavaScript" /><summary type="html">Let’s face it programming a computer is a little more involved than programming a VCR (if you’re old enough to remember those, Wikipedia for those that don’t). Those of us that have been doing it for a while can make it look easy but part of that starts with our tools. Let’s look at the developers second most critical tool. An IDE. This topic came up where I currently work, Neudesic, with some other developers. They were soliciting advice on what IDEs we preferred for what languages. Understandably there was a lot of feedback and a lot of discussion on what was best. I’m only going to cover some for .NET and JavaScript because this post would never end if I didn’t cut it off somewhere. What is an IDE IDE stands for integrated development environment. It’s a software tool that helps you write code. Some key features in this regard are intelligent code completion, build engines, source control integration, debuggers, and project file management. Some IDEs have all of these features, while others have a mixture of them. Like I said , they are tools that help you write code. If your IDE isn’t helping you write code, you’ve chosen the wrong one. One IDE to rule them all What’s the best IDE? There isn’t one. You may have to switch IDEs based on what language you are currently writing in. You may find that you don’t have to but you may want to due to languages. Some IDEs are better or have more features for certain languages. Take, for instance, Visual Studio. There are extensions galore for web development that really make JavaScript a first-class citizen, yet when I developed in CoffeeScript I preferred Sublime Text. One thing to keep in mind when reading on is that I will focus more on the ones I’ve used most. Another thing to keep in mind is that an IDE is a matter of preference. The key here is that you want to choose the IDE that suits you. Your collegues may have different preferences and may espout their chosen IDEs features, but if it doesn’t work for you then you may as well get a pipe and smack you keyboard and call it coding. .NET IDEs Visual Studio How can we not start here. It’s the main-stay of .NET IDEs and it’s what I use on a daily basis. Visual Studio comes in a variety of flavors, Express (free), Professional, Premium, and Ultimate. The main drawback of Express is that there isn’t just one version. There are several that all depend on what you want to do. There’s one specifically for web, one for desktop, one for RT (interface formerly known as metro), one for Phone, etc. They all have MSTest built in too so you can create unit tests. To be honest, for open source projects or single dev shops, you don’t really need much more. One major drawback is that you can’t install extensions like you can for the Pro and higher versions, which means no ReSharper. Professional is identical to the Express editions with the addition of extensions (yay ReSharper support), and it’s one version. Over the years the Professional version has become really watered down and, in my opinion, doesn’t cut the mustard for large projects anymore. Which brings us to Premium. All of the versions are buy-ups so to speak, so you get all the goodies of the lower-priced versions but with added features. The biggest thing that Premium gets you is the Team tools. From here you can solicit code reviews, view your tasks for the project/sprint, perform code reviews for others, etc. When I say solicit code reviews, I don’t just mean create a task, I mean full-featured reviews. You can create a task for someone and they can open that task and see all of the files you changed and do a side-by-side comparison of the changes. You even get to highlight and comment the changed code and send those comments back. When you get the comments you can click on them and it will jump you right to the line under discussion. Really cool feature and essential for larger teams. Last is Ultimate. Which has all of the features. The two big draws here are the Architecture tools and the Load and Performance test tools. In earlier versions of VS you could perform Load and Performance tests at the Premium SKU, but as of 2012 that has changed. If you’re on a larger team/project, I recommend that at least one person have one of these licenses. Alternative .NET IDEs Alternatives are SharpDevelop, which I haven’t used but I hear is a very nice alternative to VS. Another one is MonoDevelop, which if you’re doing development in Mono instead of C#, you have a choice of VS or MD, but MD is really nice at it. If JetBrains were to create an IDE for .NET and package ReSharper into it, I have a feeling that would become dominant (hint hint JetBrains :-)). JavaScript IDEs WebMatrix This is a really nice free offering from Microsoft. If you’re a .NET developer making a transition to Node.js or just don’t want to load Visual Studio, this is a really great stepping stone. It has default templates for .NET Web Projects and Node.js projects among many others. It will also automatically configure your IISExpress to run Node.js websites. You can even install a NPM extension that lets you grab packages right from the IDE. WebStorm This one is by JetBrains and is a world class web IDE. It’s biggest draws are going to be the intellisense (code completion) and refactoring tools. It’s a really nice IDE and feels very comfortable to work in. You can try before you buy and can pick up a personal license for $49 (USD). Sublime Text This one is my personal favorite. It’s comparable to TextMate if you’re familiar with it. It can even use TextMate packages. It has word completion instead of code completion out of the box so you’ll have to be aware of that going in. You can enable VIM-mode out of the box too (this may not be for everyone, but my beard demands it). The thing that really sells Sublime Text for me is the packages and a package called Package Control. It makes installing packages a few keystrokes away. There is a rich community developing packages for Sublime Text and you could even create your own. Want JavaScript Snippets? It’s there. What Express.js Snippets? They’re there too. How about jsLint or jsHint? Yup. You can make it be as robust as all the other IDEs or as simple as notepad. It’s completely up to you. After using it for CoffeeScript, JavaScript, and as my primary Node.js IDE it makes Visual Studio feel like an 80-tool swiss army knife (nice, but unweildy). You can try before you buy and can pick up a personal license for $70 (USD). No matter what IDE you choose, make sure you learn the ins and outs of it. There are things that an IDE can do to make your life so much easier when coding. Don’t ignore those things and make sure you fully explore. Happy Coding!</summary></entry></feed>